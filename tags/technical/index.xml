<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>technical on Duing Dev</title>
    <link>https://duing.dev/tags/technical/</link>
    <description>Recent content in technical on Duing Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 17 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://duing.dev/tags/technical/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Don&#39;t be a Hero, join a League</title>
      <link>https://duing.dev/posts/runtime/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/runtime/</guid>
      <description>Recently, I experimented with SYB (Scrap Your Boilerplate) in the Haskell programming language for a master&amp;rsquo;s course. The plan was for me to make a toy example of one of the professor&amp;rsquo;s ideas using this library because of its power and generality.
Prior to this project, I presented the subject for the class based on the original paper published by Simon and Ralf [1]. My impression after the reading, which is also the one that I attempted to portray to my peers, is that the usefulness of the method came at the cost of complexity of understanding and the use of unsafe operations.</description>
    </item>
    
    <item>
      <title>Fixing Recursion</title>
      <link>https://duing.dev/posts/fixingrecursion/</link>
      <pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/fixingrecursion/</guid>
      <description>Disclaimer I created this post during the make of my graduation project more than one and half years ago. This post served as training of a topic I had the intention of talking about in the final thesis &amp;ndash; something that ended up not happening. You know that when math comes into programming something special is going to happen!
Introduction Recursion is a common way to solve a wide range of problems.</description>
    </item>
    
    <item>
      <title>Circular Programming or Corecursion</title>
      <link>https://duing.dev/posts/circularprogramming/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/circularprogramming/</guid>
      <description>Disclaimer I created this post during the make of my graduation project more than one and half years ago. This post served as training of a topic I had the intention of talking about in the final thesis &amp;ndash; something that ended up not happening. I&amp;rsquo;ve made a presentation on Dr.Nekoma about the topic, given how interesting it is. The following is the original post.
Introduction Here I present a very descriptive explanation of a solution to a simple example problem.</description>
    </item>
    
  </channel>
</rss>
