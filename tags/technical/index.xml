<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>technical on Duing Dev</title>
    <link>https://duing.dev/tags/technical/</link>
    <description>Recent content in technical on Duing Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 26 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://duing.dev/tags/technical/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Threads of Abstraction</title>
      <link>https://duing.dev/posts/abstractionthreads/</link>
      <pubDate>Mon, 26 May 2025 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/abstractionthreads/</guid>
      <description>One of the most common takes you see around, being it a joke or serious, is that the software development industry sucks. And I&amp;rsquo;m not talking about it being hard, or overpaid, or any sort of work/life balance (whatever that may be, I&amp;rsquo;ll let you define). Usually the topic on-hand is about the life of the developer being miserable as the standard, which in return has as symptom the many videos on youtube about burnout, career changes, and overall mental life crisis that a lot of developers share.</description>
    </item>
    
    <item>
      <title>Do or Case of; there is no Try</title>
      <link>https://duing.dev/posts/doorcaseof/</link>
      <pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/doorcaseof/</guid>
      <description>Today I will dive into a recent experience I had when playing with erlando &amp;ndash; an Erlang library that adds a set of syntax extensions to the language. In particular, it adds a more-less Haskell&amp;rsquo;s do-notation equivalent in Erlang.
With the purpose of re-iterating the message from Don&amp;rsquo;t make all defaults Dogmas, I&amp;rsquo;m here to show another computer science abstraction that goes beyond a particular community or programming language ecosystem: monads.</description>
    </item>
    
    <item>
      <title>OOP-style Typeclasses</title>
      <link>https://duing.dev/posts/ooptypeclasses/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/ooptypeclasses/</guid>
      <description>The main benefit of exploring different programming paradigms is to learn how to build bridges. You have your preferences and by playing with the competitors, you are able to see where your preferences fall apart and vice-versa. Eventually, the mastery of both sides will allow you to syntatically and semantically connect the same concepts across different worlds of programming.
The story goes as follows: suppose you have a function that is generic enough in order to be worth it to generalize it to other types of structures, given that some constraints on it will be guaranteed.</description>
    </item>
    
    <item>
      <title>Don&#39;t be a Hero, join a League</title>
      <link>https://duing.dev/posts/runtime/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/runtime/</guid>
      <description>Recently, I experimented with SYB (Scrap Your Boilerplate) in the Haskell programming language for a master&amp;rsquo;s course. The plan was for me to make a toy example of one of the professor&amp;rsquo;s ideas using this library because of its power and generality.
Prior to this project, I presented the subject for the class based on the original paper published by Simon and Ralf [1]. My impression after the reading, which is also the one that I attempted to portray to my peers, is that the usefulness of the method came at the cost of complexity of understanding and the use of unsafe operations.</description>
    </item>
    
    <item>
      <title>Fixing Recursion</title>
      <link>https://duing.dev/posts/fixingrecursion/</link>
      <pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/fixingrecursion/</guid>
      <description>Disclaimer I created this post during the make of my graduation project more than one and half years ago. This post served as training of a topic I had the intention of talking about in the final thesis &amp;ndash; something that ended up not happening. You know that when math comes into programming something special is going to happen!
Introduction Recursion is a common way to solve a wide range of problems.</description>
    </item>
    
    <item>
      <title>Circular Programming or Corecursion</title>
      <link>https://duing.dev/posts/circularprogramming/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/circularprogramming/</guid>
      <description>Disclaimer I created this post during the make of my graduation project more than one and half years ago. This post served as training of a topic I had the intention of talking about in the final thesis &amp;ndash; something that ended up not happening. I&amp;rsquo;ve made a presentation on Dr.Nekoma about the topic, given how interesting it is. The following is the original post.
Introduction Here I present a very descriptive explanation of a solution to a simple example problem.</description>
    </item>
    
  </channel>
</rss>
