<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lesson on Duing Dev</title>
    <link>https://duing.dev/tags/lesson/</link>
    <description>Recent content in lesson on Duing Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 01 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://duing.dev/tags/lesson/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Generalist is the greatest Specialist</title>
      <link>https://duing.dev/posts/generalistspecialist/</link>
      <pubDate>Sun, 01 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/generalistspecialist/</guid>
      <description>The title of this post is a thesis &amp;ndash; an idea that I&amp;rsquo;m not really sure it is true for certain but I want to have a record of its details written somewhere.
It has been a while since I have these thoughts floating around in my head. It pops up every once in a while, specially when I see other programmers defend the idea that to reach success your duty is to become a specialist in a particular technology/language/database.</description>
    </item>
    
    <item>
      <title>Don&#39;t make all defaults Dogmas</title>
      <link>https://duing.dev/posts/defaultsarenotdogmas/</link>
      <pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/defaultsarenotdogmas/</guid>
      <description>The ability to understand and study language-agnostic concepts is invaluable. Although most of the time when programming we are interacting with language-specific features, some ideas float beyond any palpable implementation.
Thus, it is important to not only distinguish those but also to identify which ones we should use to create defaults when approaching other technologies. This, however, isn&amp;rsquo;t to say we will be unconditionally married to them &amp;ndash; effectively transforming them into dogmas.</description>
    </item>
    
    <item>
      <title>Circumstantial Leadership</title>
      <link>https://duing.dev/posts/firsttimeleader/</link>
      <pubDate>Tue, 27 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/firsttimeleader/</guid>
      <description>In the past three weeks, I led a team of developers, some would even call it a &amp;ldquo;Tech Lead&amp;rdquo; role. It was temporary and circumstantial, but I learned quite a few things about it.
Context The client had an urgent (sorta of) demand that would need to be delivered in about 3 weeks. Our team for development would be composed of myself and 3 other teammates (all from my employer&amp;rsquo;s company).</description>
    </item>
    
    <item>
      <title>Let us all be Pragmatists</title>
      <link>https://duing.dev/posts/pragmatism/</link>
      <pubDate>Mon, 16 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/pragmatism/</guid>
      <description>Every once in a while, I hear people talking about high-level languages as a way to not be practical and/or pragmatic. As an example, this week such a situation occurred &amp;mdash; I heard someone saying something along those lines about Haskell. They see the added abstractions as a way to add fanciness for the sake of fanciness into your project, without any logical practical reason for doing so.
Ever since I understood why programmers left assembly languages behind, I understood that this popular take is nothing more than just a misconception on why we seek new concepts.</description>
    </item>
    
    <item>
      <title>Is it all about the Story?</title>
      <link>https://duing.dev/posts/story/</link>
      <pubDate>Sat, 30 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/story/</guid>
      <description>When you find the same principle being applied to multiple domains, with completely different contexts, that is when you gotta watch out for such a principle. Ask yourself: how universal is this? Should I expect it to appear again in a domain near these ones? How easily does it spread to other ideas?
I suffered from this internal questioning after reading Building a StoryBrand by Donald Miller, a suggestion from my friend Eduardo Bellani.</description>
    </item>
    
    <item>
      <title>Teaching is Fun</title>
      <link>https://duing.dev/posts/teaching/</link>
      <pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/teaching/</guid>
      <description>During my vacation time from University, my mentor Edil proposed I teach undergraduate students in the following semester. He would be doing the third edition of his Functional Programming (FP) with Haskell course &amp;ndash; the one that introduced me to FP in 2021. The idea was that he would give me some guidelines and I would have the freedom to create my own material and teaching strategy for the first 2 classes of the course.</description>
    </item>
    
    <item>
      <title>Don&#39;t be a Hero, join a League</title>
      <link>https://duing.dev/posts/runtime/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/runtime/</guid>
      <description>Recently, I experimented with SYB (Scrap Your Boilerplate) in the Haskell programming language for a master&amp;rsquo;s course. The plan was for me to make a toy example of one of the professor&amp;rsquo;s ideas using this library because of its power and generality.
Prior to this project, I presented the subject for the class based on the original paper published by Simon and Ralf [1]. My impression after the reading, which is also the one that I attempted to portray to my peers, is that the usefulness of the method came at the cost of complexity of understanding and the use of unsafe operations.</description>
    </item>
    
    <item>
      <title>Beyond Hackers</title>
      <link>https://duing.dev/posts/beyondhackers/</link>
      <pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/beyondhackers/</guid>
      <description>The Cathedral and the Bazaar by Eric S. Raymond is a perfect union of philosophy, economics, and software development culture. The reverberations of his theory are fascinating and explain much more than just why you should care about open-source software.
Needless to say that I highly recommend the reading, there are aspects that he identified within the Hacker Culture that explain more than meets the naked eye. I&amp;rsquo;m here to suggest a few possible explanations for such observations and how the connection between those aspects and a hacker is more than just making money via coding.</description>
    </item>
    
    <item>
      <title>Why Masters?</title>
      <link>https://duing.dev/posts/masters/</link>
      <pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/masters/</guid>
      <description>Starting in March, I will start a master&amp;rsquo;s program at University of Bras√≠lia, the same university where I graduated almost a year ago. The thought process that I went in order to make such a decision is not conventional and I think it is worth sharing it.
Software Industry As we know, the software industry values academic achievements only in very specific situations, usually involving big companies with very complicated projects to push, such as the next Apple M3 processor and Windows 12 at Microsoft.</description>
    </item>
    
    <item>
      <title>Do we still care about Art?</title>
      <link>https://duing.dev/posts/careaboutart/</link>
      <pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/careaboutart/</guid>
      <description>In this post, I want to talk about how a movie that I watched years ago added some value in the current version of myself. How, now that I&amp;rsquo;m much older than back then, I see that the movie showed to me that art is much more important that I thought. How, even in my profession, there can be a noble purpose.
Retrospective Sometimes we remember our infancy. We remember the toys we used to play with, the people we used to interact with, the lessons that we learned along the way (usually in the most painful way), and also we remember what we used to watch.</description>
    </item>
    
    <item>
      <title>My best idea of 2022</title>
      <link>https://duing.dev/posts/bestidea2022/</link>
      <pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://duing.dev/posts/bestidea2022/</guid>
      <description>During 2022, a lot of things happened. I graduated from university, got my first job, and moved to a new one, the second one being my first international experience within the programming industry. While working, I also continued the development of my graduation thesis with the help of my friend and mentor Edil Medeiros. All these experiences were great on their own, but they don&amp;rsquo;t even get close to how good the idea of a study group was.</description>
    </item>
    
  </channel>
</rss>
