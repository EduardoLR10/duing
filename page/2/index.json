
{
    
    
    
    
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
        
        
        
    
    "articles": [{"date":"2024-06-19","image":"","imageAlt":"","link":"https://duing.dev/posts/defaultsarenotdogmas/","summary":"The ability to understand and study language-agnostic concepts is invaluable. Although most of the time when programming we are interacting with language-specific features, some ideas float beyond any palpable implementation.\nThus, it is important to not only distinguish those but also to identify which ones we should use to create defaults when approaching other technologies. This, however, isn\u0026rsquo;t to say we will be unconditionally married to them \u0026ndash; effectively transforming them into dogmas.","tags":["lesson"],"title":"Don't make all defaults Dogmas"},{"date":"2024-02-27","image":"","imageAlt":"","link":"https://duing.dev/posts/firsttimeleader/","summary":"In the past three weeks, I led a team of developers, some would even call it a \u0026ldquo;Tech Lead\u0026rdquo; role. It was temporary and circumstantial, but I learned quite a few things about it.\nContext The client had an urgent (sorta of) demand that would need to be delivered in about 3 weeks. Our team for development would be composed of myself and 3 other teammates (all from my employer\u0026rsquo;s company).","tags":["lesson"],"title":"Circumstantial Leadership"},{"date":"2023-10-16","image":"","imageAlt":"","link":"https://duing.dev/posts/pragmatism/","summary":"Every once in a while, I hear people talking about high-level languages as a way to not be practical and/or pragmatic. As an example, this week such a situation occurred \u0026mdash; I heard someone saying something along those lines about Haskell. They see the added abstractions as a way to add fanciness for the sake of fanciness into your project, without any logical practical reason for doing so.\nEver since I understood why programmers left assembly languages behind, I understood that this popular take is nothing more than just a misconception on why we seek new concepts.","tags":["lesson"],"title":"Let us all be Pragmatists"},{"date":"2023-09-30","image":"","imageAlt":"","link":"https://duing.dev/posts/story/","summary":"When you find the same principle being applied to multiple domains, with completely different contexts, that is when you gotta watch out for such a principle. Ask yourself: how universal is this? Should I expect it to appear again in a domain near these ones? How easily does it spread to other ideas?\nI suffered from this internal questioning after reading Building a StoryBrand by Donald Miller, a suggestion from my friend Eduardo Bellani.","tags":["lesson","recommendation"],"title":"Is it all about the Story?"},{"date":"2023-09-01","image":"","imageAlt":"","link":"https://duing.dev/posts/teaching/","summary":"During my vacation time from University, my mentor Edil proposed I teach undergraduate students in the following semester. He would be doing the third edition of his Functional Programming (FP) with Haskell course \u0026ndash; the one that introduced me to FP in 2021. The idea was that he would give me some guidelines and I would have the freedom to create my own material and teaching strategy for the first 2 classes of the course.","tags":["lesson"],"title":"Teaching is Fun"}],
    "test": "Publications   About   Hopeful Abstractions   The Generalist is the greatest Specialist   Do or Case of; there is no Try   Don't make all defaults Dogmas   Circumstantial Leadership   Let us all be Pragmatists   Is it all about the Story?   Teaching is Fun   OOP-style Typeclasses   Don't be a Hero, join a League   Beyond Hackers   Why Masters?   Do we still care about Art?   My best idea of 2022   Fixing Recursion   Circular Programming or Corecursion   ",
    "page": "2",
    "next": 
        "https://duing.dev/page/3/index.json"
    
}

