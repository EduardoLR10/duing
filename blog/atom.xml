<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>~glorifiedgluer</title>
  <link href="https://glorifiedgluer.com/blog/"/>
  
    <link href="https://glorifiedgluer.com/blog/atom.xml" rel="self" type="application/atom+xml" />
  
  <updated>1970-01-01T00:00:00Z</updated>
  <author>
    <name>Victor Freire</name>
    
  </author>
  <generator>Hugo</generator>
  <id>https://glorifiedgluer.com/blog/</id>
  
  <entry>
    <title>one post</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2023/one-post/"/>
    <id>https://glorifiedgluer.com/blog/2023/one-post/</id>
    <published>2023-01-03T00:00:00Z</published>
    <updated>2023-01-03T00:00:00Z</updated>
    <summary>This is a title bla bla bla</summary>
    <content type="html">&lt;h2 id=&#34;this-is-a-title&#34;&gt;This is a title&lt;/h2&gt;
&lt;p&gt;bla bla bla&lt;/p&gt;
</content>
    
    
    <category term="testing"/>
    
  </entry>
  
  <entry>
    <title>New Year&#39;s Resolutions for 2023</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2023/new-years-resolutions-for-2023/"/>
    <id>https://glorifiedgluer.com/blog/2023/new-years-resolutions-for-2023/</id>
    <published>2023-01-01T00:00:00Z</published>
    <updated>2023-01-01T00:00:00Z</updated>
    <summary>I have never done a New Year&amp;rsquo;s resolution before&amp;hellip; well, at least not a public one written down in a blog post! üòÅ
 Content  More blog posts Write more software (if possible, in F#) Take more pictures   Habits  Turn spaced repetition into a habit Read at least a book each month   Knowledge  Be able to hold at least a basic conversation in French   Gym-related goals  Squat: 150kg for 5 reps.</summary>
    <content type="html">&lt;p&gt;I have never done a New Year&amp;rsquo;s resolution before&amp;hellip; well, at least not
a public one written down in a blog post! üòÅ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content
&lt;ul&gt;
&lt;li&gt;More blog posts&lt;/li&gt;
&lt;li&gt;Write more software (if possible, in F#)&lt;/li&gt;
&lt;li&gt;Take more pictures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Habits
&lt;ul&gt;
&lt;li&gt;Turn &lt;a href=&#34;https://www.gwern.net/Spaced-repetition&#34;&gt;spaced repetition&lt;/a&gt; into a habit&lt;/li&gt;
&lt;li&gt;Read at least a book each month&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Knowledge
&lt;ul&gt;
&lt;li&gt;Be able to hold at least a basic conversation in French&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gym-related goals
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Squat:&lt;/strong&gt; 150kg for 5 reps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deadlift:&lt;/strong&gt; 200kg MR.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Benchpress:&lt;/strong&gt; 100kg for 5 reps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Overhead Press:&lt;/strong&gt; 60kg for 5 reps.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Travel-related goals
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nationally:&lt;/strong&gt; Visit &lt;a href=&#34;https://en.wikipedia.org/wiki/Ouro_Preto&#34;&gt;Ouro Preto&lt;/a&gt;; visit S√£o Paulo&amp;rsquo;s countryside;
discover new restaurants&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internationally:&lt;/strong&gt; Visit Japan or an European country&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Being completely honest, this is a lot for a single year. Even more for the traveling part.
But, it&amp;rsquo;s how they say: &lt;em&gt;go big or go home&lt;/em&gt;!&lt;/p&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Setting up my new Synology DS1520&#43;</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2022/setting-up-my-new-synology-ds1520-/"/>
    <id>https://glorifiedgluer.com/blog/2022/setting-up-my-new-synology-ds1520-/</id>
    <published>2022-12-26T00:00:00Z</published>
    <updated>2022-12-26T00:00:00Z</updated>
    <summary>The DS1520&amp;#43;, 5x4TB IronWolf ST4000VN008 and 1TB SKC3000S1024G NVMe. (2022-12-26)   Some time ago I built a NAS for personal usage. It has been a blessing in my life as I&amp;rsquo;m not afraid of losing data or going out of storage anymore. However, due to some unfortunate events, I don&amp;rsquo;t have a place to run it other than my bedroom, but it is too noisy to keep it beside my bed.</summary>
    <content type="html">&lt;figure&gt;&lt;img src=&#34;/img/2022-12-26-synology.webp&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;The DS1520&amp;#43;, 5x4TB IronWolf ST4000VN008 and 1TB SKC3000S1024G NVMe. (2022-12-26)&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Some time ago &lt;a href=&#34;/blog/2022/building-a-dell-poweredge-t410-nas-with-nixos-and-zfs/&#34;&gt;I built a NAS for personal usage&lt;/a&gt;. It has been a blessing
in my life as I&amp;rsquo;m not afraid of losing data or going out of storage
anymore. However, due to some unfortunate events, I don&amp;rsquo;t have a place
to run it other than my bedroom, but it is too noisy to keep it beside
my bed.&lt;/p&gt;
&lt;p&gt;I decided to migrate the server to a smaller form so that I could rest
comfortable without a running computer on my ears. Interestingly, in
Brazil we don&amp;rsquo;t have much options for small factor cases such as ITX.
Considering that I wouldn&amp;rsquo;t be able to build it my own, I decided to
go with a Synology DS1520+.&lt;/p&gt;
&lt;h2 id=&#34;software&#34;&gt;Software&lt;/h2&gt;
&lt;p&gt;Now, I&amp;rsquo;m going to be honest here, the software is absolutely awesome.
Personally, I don&amp;rsquo;t like to use closed-source software (and I&amp;rsquo;ll show
you one of the reasons in a few moments), but the disk and backup
management is way better than something I could come up with. I don&amp;rsquo;t
know how long they will support my model and its software but for the
time being I&amp;rsquo;m enjoying it.&lt;/p&gt;
&lt;p&gt;Partitioning and formatting was always a struggle for me as I can&amp;rsquo;t
decide for myself if I should go with Btrfs or ZFS; which RAID setup
or how many datasets to create. This was all automatically handled for
me.&lt;/p&gt;
&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;
&lt;p&gt;This is the part that sucks the most about the device. I mean, the
hardware is definitely reasonable for its original use case: file
storage. It has a &lt;a href=&#34;https://www.intel.com/content/www/us/en/products/sku/197305/intel-celeron-processor-j4125-4m-cache-up-to-2-70-ghz/specifications.html&#34;&gt;Celeron J4125&lt;/a&gt; with 8GB DDR4 ECC RAM (up to 20GB).
This is more than enough for my needs.&lt;/p&gt;
&lt;p&gt;What about the noise? I can&amp;rsquo;t hear it at all! The only noise that it
introduces to the room is actually from it hard-drives, but nothing
loud enough to disrupt my sleep as it&amp;rsquo;s barely noticeable.&lt;/p&gt;
&lt;p&gt;Something that I think I shouldn&amp;rsquo;t have bought is the NVMe drive for
caching. I thought that by running a bunch of media software I&amp;rsquo;d get
better performance caching reads on the SSD. Well, it turns out that I
don&amp;rsquo;t actually have this much reads and I only hit a cache of 5GB on a
daily-basis.&lt;/p&gt;
&lt;h2 id=&#34;what-about-the-containers&#34;&gt;What about the containers?&lt;/h2&gt;
&lt;p&gt;Synology provides an official Docker application at its &lt;em&gt;Package
Center&lt;/em&gt; that you can just install and go crazy with it&amp;hellip; or not. I
might have done everything wrong and tried to circumvent the software
in a way that is not recommended. However, every time I tried to run a
container that exposes an HTTP server, I got redirected to the port
&lt;code&gt;5000&lt;/code&gt; by my device&amp;rsquo;s NGINX. I spent a ridiculous amount of time
trying to change this behavior but I thought that it would be easier
to setup this in a way that I&amp;rsquo;m used to.&lt;/p&gt;
&lt;h3 id=&#34;alpine-linux-for-the-rescue&#34;&gt;Alpine Linux for the rescue&lt;/h3&gt;
&lt;p&gt;Feeling defeated by Synology&amp;rsquo;s software, I decided to try a &lt;em&gt;different
approach&lt;/em&gt;: a regular Linux distribution. As my
hardware is really limited, I want to use as less resources as
possible. For this reason I chose to go with &lt;a href=&#34;https://www.alpinelinux.org/&#34;&gt;Alpine Linux&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; as the
backbone of my virtual machine.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s nothing novel about running containers with Docker and
&lt;code&gt;docker-compose&lt;/code&gt;, so I&amp;rsquo;m not going to dig deeper on setting this up.&lt;/p&gt;
&lt;h4 id=&#34;using-nfs-as-the-storage&#34;&gt;Using NFS as the storage&lt;/h4&gt;
&lt;p&gt;Docker has a poorly documented way of setting up an NFS share directly
on the container and due to this I assume they don&amp;rsquo;t want you to use
this feature üòú. Anyway, mounting an NFS share is much easier than
going trial and error with docker volumes over NFS.&lt;/p&gt;
&lt;p&gt;I created the NFS share on Synology&amp;rsquo;s dashboard and then on my alpine
machine I ran:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;  mkdir -p /mnt/docker
  mount -t nfs &amp;lt;ip&amp;gt;:/volume1/&amp;lt;share-dir&amp;gt; /mnt/docker&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;I also added this line on my &lt;code&gt;/etc/fstab&lt;/code&gt; file to automatically mount
the NFS volume after boot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;  &amp;lt;ip&amp;gt;:/volume1/&amp;lt;share-dir&amp;gt; /mnt/docker nfs _netdev 0 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;This might not be obvious at this point, but doing things this way is
awesome because I can just mount volumes pointing to &lt;code&gt;/mnt/docker&lt;/code&gt; and
backup them through &lt;a href=&#34;https://www.synology.com/en-global/dsm/feature/hyper_backup&#34;&gt;Hyper Backup&lt;/a&gt; on &lt;a href=&#34;https://www.backblaze.com/b2/cloud-storage.html&#34;&gt;Backblaze B2&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;yaml&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-yaml hljs&#34; data-lang=&#34;yaml&#34;&gt;  caddy:
    image: caddy:2.6
    # ...
    volumes:
      - /mnt/docker/caddy/Caddyfile:/etc/caddy/Caddyfile
      # ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;yaml&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;This setup gives me the most out of everything I tried so far:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Flexibility&lt;/dt&gt;
&lt;dd&gt;I configure my services through a regular Linux
system with extensive documentation.&lt;/dd&gt;
&lt;dt&gt;Security&lt;/dt&gt;
&lt;dd&gt;Hyper Backup assures me things are backed up correctly.&lt;/dd&gt;
&lt;dt&gt;Portability&lt;/dt&gt;
&lt;dd&gt;They are regular containers, I can easily migrate to another host&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;My current experience has been positive. Although, I&amp;rsquo;m still kind of
skeptical about the longevity of the backup software. It is easy to
use and makes incremental backups a breezy to setup, but I still want
the freedom to restore on a Linux server without much trouble. Well,
this is mostly a personal desire and I understand this device was not
made for my use case! üòÅ&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;They even provide an image made specifically for virtualization! üéâ&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Custom JWT Authentication with F# and ASP.NET</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2022/custom-jwt-authentication-fsharp-asp-net/"/>
    <id>https://glorifiedgluer.com/blog/2022/custom-jwt-authentication-fsharp-asp-net/</id>
    <published>2022-12-20T00:00:00Z</published>
    <updated>2022-12-20T00:00:00Z</updated>
    <summary>At my $CURRENT_JOB we are working on introducing a new back-end service, and as usual, teams entirely composed of new-ish employees face some hard time discovering all the small pieces required to make the gears turn.
This time the challenge was to implement the authentication layer. It is actually quite simple as it is just a regular JWT token, but the devil&amp;rsquo;s in the details:
 the token is on a custom header called `x-jwt-payload` the token does not contain the alg attribute the validation is done internally at the reverse proxy level  OK, this doesn&amp;rsquo;t sound too bad.</summary>
    <content type="html">&lt;p&gt;At my &lt;code&gt;$CURRENT_JOB&lt;/code&gt; we are working on introducing a new back-end
service, and as usual, teams entirely composed of new-ish employees
face some hard time discovering all the small pieces required to make
the gears turn.&lt;/p&gt;
&lt;p&gt;This time the challenge was to implement the authentication layer. It
is actually quite simple as it is just a &lt;em&gt;regular JWT&lt;/em&gt; token, but the
devil&amp;rsquo;s in the details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the token is on a custom header called `x-jwt-payload`&lt;/li&gt;
&lt;li&gt;the token does not contain the &lt;code&gt;alg&lt;/code&gt; attribute&lt;/li&gt;
&lt;li&gt;the validation is done internally at the reverse proxy level&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OK, this doesn&amp;rsquo;t sound &lt;em&gt;too&lt;/em&gt; bad. However, it does take some tools
from our hands&amp;hellip; ASP.NET has the &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/jwt-validation-and-authorization-in-asp-net-core/&#34;&gt;UseJwtBearerAuthentication
middleware&lt;/a&gt; that would take care of this workflow for us, but this
requires access to the &lt;em&gt;Authority&lt;/em&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; server which we don&amp;rsquo;t have,
and also requires the &lt;code&gt;alg&lt;/code&gt; attribute to decode the token.&lt;/p&gt;
&lt;p&gt;Having said that, let&amp;rsquo;s develop another middleware to take of our
authentication. I tried to reach the official documentation on how to
write a custom authentication scheme for ASP.NET but it was less than
useless. Then I tried to reach for blog posts, Stack Overflow
questions and open source projects, but they all seemed so convoluted
for such a small feature&amp;hellip; When I was almost going to &lt;em&gt;brute force&lt;/em&gt;
the solution out of my IDE through auto completion and debugging, &lt;a href=&#34;https://stackoverflow.com/a/46568439&#34;&gt;this
answer&lt;/a&gt; appeared!&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it! This is what I needed, a really concise example going
through each step of the authentication workflow. I wonder why
Microsoft doesn&amp;rsquo;t have something like this on their docs. Or at least
not something easy to find there.&lt;/p&gt;
&lt;p&gt;Alright, time to implement piece by piece of this code. Starting with
the Authentication scheme definition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;fsharp&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-fsharp hljs&#34; data-lang=&#34;fsharp&#34;&gt;  type CustomJwtAuthenticationOptions() =
      inherit AuthenticationSchemeOptions()

      member this.DefaultScheme = &amp;#34;CustomJwtAuthentication&amp;#34;
      member this.HeaderName = &amp;#34;x-jwt-payload&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;fsharp&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;The next missing part is the &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.authentication.authenticationhandler-1?view=aspnetcore-7.0&#34;&gt;Authentication Handler&lt;/a&gt;. For this, I&amp;rsquo;ll
use the great &lt;a href=&#34;https://demystifyfp.gitbook.io/fstoolkit-errorhandling&#34;&gt;FsToolkit.ErrorHandling&lt;/a&gt; package to help structure the
code, so do a &lt;code&gt;dotnet add package FsToolkit.ErrorHandling&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;fsharp&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-fsharp hljs&#34; data-lang=&#34;fsharp&#34;&gt;  type CustomJwtAuthenticationHandler
      (
          options: IOptionsMonitor&amp;lt;CustomJwtAuthenticationOptions&amp;gt;,
          logger: ILoggerFactory,
          encoder: UrlEncoder,
          clock: ISystemClock
      ) =
      inherit AuthenticationHandler&amp;lt;CustomJwtAuthenticationOptions&amp;gt;(options, logger, encoder, clock)

      override this.HandleAuthenticationAsync() =
          result {
              let! token = this.RetrieveTokenValue this.Options.HeaderName
              let! jwt = this.DecodeToken token

              let name =
                  let firstName =
                      jwt.Item(&amp;#34;firstName&amp;#34;) |&amp;gt; string
                  let lastName =
                      jwt.Item(&amp;#34;lastName&amp;#34;) |&amp;gt; string

                  $&amp;#34;{firstName} {LastName}&amp;#34;

              let claims =
                  [ Claim(ClaimTypes.NameIdentifier, jwt.Sub)
                    Claim(ClaimTypes.Name, name) ]

              let claimIdentity =
                  ClaimsIdentity(claims, this.Options.DefaultSchemeName)

              let ticket =
                  AuthenticationTicket(
                      ClaimsPrincipal(claimsIdentity),
                      AuthenticationProperties(),
                      this.Options.DefaultSchemeName
                  )

              return Task.FromResult(AuthenticateResult.Success(ticket))
          }
          |&amp;gt; function
              | Ok value -&amp;gt; value
              | Error e -&amp;gt; Task.FromResult(AuthenticateResult.Fail(e))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;fsharp&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;And that&amp;rsquo;s it! I now have the custom JWT authentication I needed for
my ASP.NET application. Of course, we are missing some helper methods
I used on the code. Let&amp;rsquo;s take a look at them.&lt;/p&gt;
&lt;p&gt;This function is used to extract the Base 64 token from the header.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;fsharp&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-fsharp hljs&#34; data-lang=&#34;fsharp&#34;&gt;  member private this.RetrieveTokenValue name =
      let found, value =
          this.Request.Headers.TryGetValue(name)

      if not found then
          Error $&amp;#34;Missing header &amp;#39;{name}&amp;#39;&amp;#34;
      else
          value.ToString()
          |&amp;gt; String.IsNullOrWhiteSpace
          |&amp;gt; function
              | false -&amp;gt; Ok value
              | true -&amp;gt; Error $&amp;#34;Missing header &amp;#39;{name}&amp;#39; value&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;fsharp&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;Now the function responsible to decode the JWT token itself.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;fsharp&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-fsharp hljs&#34; data-lang=&#34;fsharp&#34;&gt;  member private this.DecodeToken token =
      try
          let jwt =
              token
              |&amp;gt; Convert.FromBase64String
              |&amp;gt; Encoding.UTF8.GetString
              |&amp;gt; Jwt.JwtPayload.Deserialize

          Ok jwt
      with
      | exn -&amp;gt; Error $&amp;#34;Error decoding token: {exn.Message}&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;fsharp&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;OK, &lt;strong&gt;now&lt;/strong&gt; we have everything needed to use our brand new
authentication scheme. How can we plug this together on our
application&amp;rsquo;s startup? Considering that we&amp;rsquo;re using &lt;a href=&#34;https://saturnframework.org/&#34;&gt;Saturn&lt;/a&gt; to
configure it, it would look just like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;fsharp&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-fsharp hljs&#34; data-lang=&#34;fsharp&#34;&gt;  let configureApp (app: IApplicationBuilder) =
      app.UseAuthentication()

  let configureServices (services: IServiceCollection) =
      services
          .AddAuthentication(
              CustomJwtAuthenticationOptions().DefaultScheme
          )
          .AddScheme&amp;lt;CustomJwtAuthenticationOptions, CustomJwtAuthenticationHandler&amp;gt;(
              CustomJwtAuthenticationOptions().DefaultScheme, (fun options -&amp;gt; ())
          )
      |&amp;gt; ignore

      services

  let main _ =
      let app =
          application {
              // ...
              app_config configureApp
              service_config configureServices
          }
          run app&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;fsharp&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The address of the token-issuing authentication server. The JWT bearer authentication middleware will use this URI to find and retrieve the public key that can be used to validate the token‚Äôs signature. It will also confirm that the iss parameter in the token matches this URI.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Debian&#39;s blank screen after suspending on Thinkpad T495</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2022/debians-blank-screen-after-suspending-on-thinkpad-t495/"/>
    <id>https://glorifiedgluer.com/blog/2022/debians-blank-screen-after-suspending-on-thinkpad-t495/</id>
    <published>2022-12-09T00:00:00Z</published>
    <updated>2022-12-09T00:00:00Z</updated>
    <summary>tl;dr: sudo apt install firmware-amd-graphics
After working on a huge legacy project that demanded a beefy desktop at the company I can finally work from my laptop through Virtual Machines. These are the specs for it:
nil CPU: AMD Ryzen 7 PRO 3700U RAM: 40GB DISK: 1TB NVMe SSD   .highlight-type { content: &#34;nil&#34;; position: absolute; opacity: 0.5; } It&amp;rsquo;s not news that I love NixOS and run it on all my devices.</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; &lt;code&gt;sudo apt install firmware-amd-graphics&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After working on a huge legacy project that demanded a beefy desktop
at the company I can finally work from my laptop through Virtual
Machines. These are the specs for it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;nil&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-nil hljs&#34; data-lang=&#34;nil&#34;&gt;CPU: AMD Ryzen 7 PRO 3700U
RAM: 40GB
DISK: 1TB NVMe SSD&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;nil&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;It&amp;rsquo;s not news that I love NixOS and run it on all my devices. However,
for some reason I can&amp;rsquo;t really explain or reason upon, I prefer to run
&lt;a href=&#34;https://www.debian.org/&#34;&gt;Debian&lt;/a&gt; on my laptop. I went ahead and
installed it but&amp;hellip; after letting it sit for a few minutes I faced an
issue: resuming from &lt;em&gt;Suspend&lt;/em&gt; gave me a blank screen with no option
out of it other than force rebooting.&lt;/p&gt;
&lt;p&gt;After a &lt;strong&gt;long&lt;/strong&gt; research and multiple attempts testing some &lt;code&gt;GRUB_CMDLINE_LINUX&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; arguments, I finally found the solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;nil&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-nil hljs&#34; data-lang=&#34;nil&#34;&gt;sudo apt install firmware-amd-graphics&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;nil&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Did you know that setting &lt;code&gt;splash&lt;/code&gt; on &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt; gives you a cute splash screen instead of a tty asking for your password to unlock your encrypted partition?&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Building a Dell PowerEdge T410 NAS with NixOS and ZFS</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2022/building-a-dell-poweredge-t410-nas-with-nixos-and-zfs/"/>
    <id>https://glorifiedgluer.com/blog/2022/building-a-dell-poweredge-t410-nas-with-nixos-and-zfs/</id>
    <published>2022-09-06T00:00:00Z</published>
    <updated>2022-09-06T00:00:00Z</updated>
    <summary>For some time I&amp;rsquo;ve been thinking about getting a NAS for personal usage. However, most of the prebuilt solutions are too expensive here and they don&amp;rsquo;t even come with hard drives&amp;hellip; I then decided to research a cheap way to build it my own.
One famous guide for home-built NAS is the NAS KILLER series by u/JDM_WAAAT. I tried to find most of the parts shown there but I always missed one as it was either not available or couldn&amp;rsquo;t be shipped here.</summary>
    <content type="html">&lt;p&gt;For some time I&amp;rsquo;ve been thinking about getting a NAS for personal usage.
However, most of the &lt;em&gt;prebuilt&lt;/em&gt; solutions are too expensive here and they don&amp;rsquo;t
even come with hard drives&amp;hellip; I then decided to research a cheap way to build it
my own.&lt;/p&gt;
&lt;p&gt;One famous guide for home-built NAS is the &lt;a href=&#34;https://forums.serverbuilds.net/t/guide-nas-killer-5-0/3072&#34;&gt;NAS KILLER&lt;/a&gt; series by &lt;a href=&#34;https://old.reddit.com/user/JDM_WAAAT/&#34;&gt;u/JDM_WAAAT&lt;/a&gt;. I
tried to find most of the parts shown there but I always missed one as it was
either not available or couldn&amp;rsquo;t be shipped here. This way my only choice was to
look at the prebuilt options they mention on the series. I saw a mention of some
models of Dell PowerEdges and decided to take a look at the local second-hand
market.&lt;/p&gt;
&lt;p&gt;There it was, a Dell PowerEdge T410 for R\$400 (equivalent of \$75) including
shipping. Such a steal considering that they go fora bout  R\$3.5k here! The
specs are the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Host&lt;/th&gt;
&lt;th&gt;Dell PowerEdge 410&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;Intel Xeon X5660 (12) @ 1.596GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;Matrox Electronics Systems Ltd. PowerEdge T410&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Memory&lt;/td&gt;
&lt;td&gt;32GB DDR3 ECC 1600MHz&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can see the whole cost of this setup below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Date (in days)&lt;/th&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Price (R$)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2022-09-07 Wed&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Dell PowerEdge T410 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2022-09-07 Wed&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://pt.aliexpress.com/item/1005004253108255.html&#34;&gt;Dell PERC H200&lt;/a&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;166.96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2022-09-09 Fri&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://produto.mercadolivre.com.br/MLB-2199914105-hdd-dell-4tb-sas-6gbps-rpm-72k-35-st4000nm0023-pn-0drmyh-_JM&#34;&gt;5x Seagate ST4000NM0023 4TB&lt;/a&gt; &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;4455&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;timestamp-wrapper&#34;&gt;&lt;span class=&#34;timestamp&#34;&gt;&amp;lt;2022-10-20 Thu&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://pt.aliexpress.com/item/32840300151.html&#34;&gt;32GB 1600MHz RAM DDR3 ECC (16x2)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;161.51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5183.47&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;upgrading-the-poweredge-raid-controller--perc&#34;&gt;Upgrading the PowerEdge RAID Controller (PERC)&lt;/h2&gt;
&lt;p&gt;Unfortunately my server came with a &lt;a href=&#34;https://www.dell.com/support/kbdoc/en-us/000131648/list-of-poweredge-raid-controller-perc-types-for-dell-emc-systems&#34;&gt;Dell PERC 6/I&lt;/a&gt; which only supports disks as
big as 2TB. Doing some research over the internet I found out that I had two
options of upgrades here: H200 or H700.&lt;/p&gt;
&lt;p&gt;As I&amp;rsquo;m going to use ZFS as my filesystem, I went with H200 because I can just
use it in IT mode (as JBOD) making it possible to pass all the drives directly
to my ZFS pool without the hardware interfering much.&lt;/p&gt;
&lt;p&gt;Now something that I want to confess here&amp;hellip; I was afraid to buy this server and
have to pay enterprise prices for hardware or even restrict my ability to
expand/replace the system. However, I learned that I can use my new H200 PERC on
a regular desktop&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; with some special cables you can buy for cheap so I
might even be able to build a smaller machine with the same amount of disks and
a more balanced power/comsuption ratio.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-ssh&#34;&gt;Setting up SSH&lt;/h2&gt;
&lt;p&gt;The first thing I do on the NixOS installation media is to change the &lt;code&gt;nixos&lt;/code&gt;
user password to proceed the installation in another computer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;$ passwd

# over the other computer
$ ssh nixos@&amp;lt;ip&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h2 id=&#34;configuring-the-disks&#34;&gt;Configuring the disks&lt;/h2&gt;
&lt;p&gt;Fortunately, using ZFS with NixOS is a breeze. It has a really good support and
I can even boot from a ZFS pool. Let&amp;rsquo;s start by listing the disks and getting
their IDs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;[nixos@nixos:~]$ ls -al /dev/disk/by-id/
total 0
drwxr-xr-x 2 root root 340 Nov  2 15:12 .
drwxr-xr-x 7 root root 140 Nov  2 14:54 ..
lrwxrwxrwx 1 root root   9 Nov  2 15:12 scsi-35000c500571d23bf -&amp;gt; ../../sdb
lrwxrwxrwx 1 root root   9 Nov  2 15:12 scsi-35000c500964ac36f -&amp;gt; ../../sdd
lrwxrwxrwx 1 root root   9 Nov  2 15:12 scsi-35000c500964b5e7b -&amp;gt; ../../sdc
lrwxrwxrwx 1 root root   9 Nov  2 15:12 scsi-35000c500964b723b -&amp;gt; ../../sdf
lrwxrwxrwx 1 root root   9 Nov  2 15:12 scsi-35000c500964bbbd3 -&amp;gt; ../../sde&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;We should use the disks IDs on our ZFS pool, this will avoid some headaches in
the future as switching the HDs bays and ZFS losing tracks of which disk is
which. Ok, now that we have the IDs, let&amp;rsquo;s wipe them to make sure we don&amp;rsquo;t have
any filesystems on them already.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;DISK1=/dev/disk/by-id/scsi-35000c500571d23bf
DISK2=/dev/disk/by-id/scsi-35000c500964ac36f
DISK3=/dev/disk/by-id/scsi-35000c500964b5e7b
DISK4=/dev/disk/by-id/scsi-35000c500964b723b
DISK5=/dev/disk/by-id/scsi-35000c500964bbbd3

sudo wipefs -af $DISK1
sudo wipefs -af $DISK2
sudo wipefs -af $DISK3
sudo wipefs -af $DISK4
sudo wipefs -af $DISK5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;Now the last bit missing is the partition layout:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;sudo sgdisk -n3:1M:&amp;#43;512M -t3:EF00 $DISK1
sudo sgdisk -n1:0:0 -t1:BF01 $DISK1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;After this we just copy it to the other drives:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;sudo sfdisk --dump $DISK1 | sudo sfdisk $DISK2
sudo sfdisk --dump $DISK1 | sudo sfdisk $DISK3
sudo sfdisk --dump $DISK1 | sudo sfdisk $DISK4
sudo sfdisk --dump $DISK1 | sudo sfdisk $DISK5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h3 id=&#34;formatting&#34;&gt;Formatting&lt;/h3&gt;
&lt;h4 id=&#34;boot&#34;&gt;Boot&lt;/h4&gt;
&lt;p&gt;Starting with the boot partition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;sudo mkfs.vfat $DISK1-part3
sudo mkfs.vfat $DISK2-part3
sudo mkfs.vfat $DISK3-part3
sudo mkfs.vfat $DISK4-part3
sudo mkfs.vfat $DISK5-part3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h4 id=&#34;zfs&#34;&gt;ZFS&lt;/h4&gt;
&lt;p&gt;Considering that I want two disk parity on my setup, I&amp;rsquo;m going with a &lt;em&gt;raidz2&lt;/em&gt; pool.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;sudo zpool create -o ashift=12 \
                  -O dnodesize=auto \
                  -O normalization=formD \
                  -O relatime=on \
                  -O acltype=posixacl \
                  -O xattr=sa \
                  -O mountpoint=none \
                  -O compression=lz4 \
                  -O recordsize=1M \
                  zroot raidz2 \
                  $DISK1-part1 $DISK2-part1 $DISK3-part1 $DISK4-part1 $DISK5-part1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;And the following datasets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;sudo zfs create -o mountpoint=none zroot/root
sudo zfs create -o mountpoint=legacy zroot/root/nixos
sudo zfs create -o mountpoint=legacy zroot/var
sudo zfs create -o mountpoint=legacy zroot/var/media
sudo zfs create -o mountpoint=legacy zroot/var/torrents
sudo zfs create -o mountpoint=legacy zroot/var/samba
sudo zfs create -o mountpoint=legacy zroot/home&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h3 id=&#34;mounting-everything-together&#34;&gt;Mounting everything together&lt;/h3&gt;
&lt;p&gt;Mounting is the easiest part of the whole process. However, we need the directories to be there in the first place.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;sudo mount -t zfs zroot/root/nixos /mnt
sudo mkdir /mnt/home
sudo mkdir -p /mnt/var/lib/{torrents,media,samba}
sudo mkdir /mnt/boot&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;Now it&amp;rsquo;s just a matter of &lt;em&gt;mapping&lt;/em&gt; everything to the right place:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;sudo mount -t zfs zroot/home /mnt/home
sudo mount -t zfs zroot/var /mnt/var
sudo mount -t zfs zroot/var/media /mnt/var/lib/media
sudo mount -t zfs zroot/var/torrents /mnt/var/lib/torrents
sudo mount -t zfs zroot/var/samba /mnt/var/lib/samba
sudo mount $DISK1-part3 /mnt/boot&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h2 id=&#34;finishing-up&#34;&gt;Finishing up&lt;/h2&gt;
&lt;p&gt;The only step left is to generate the NixOS configuration with the filesystem layout and install the system:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;sudo nixos-generate-config --root /mnt

# don&amp;#39;t forget to get your machine id and put it on `networking.hostId`
head -c 8 /etc/machine-id

sudo nixos-install&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;This hardware is actually overkill for this build but I couldn&amp;rsquo;t find anything better for such a price.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Unfortunately my machine arrived with a Dell PERC 6/i that has a 2TB per disk limit.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Unfortunately hard drives are &lt;strong&gt;really&lt;/strong&gt; expensive in Brazil due to taxes&amp;hellip; a ~$35 drive costing near $200 is just insane!&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;A lot of people use the LSI 9240-8I HBA on regular desktops.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Implementing Correlation IDs in F# with Giraffe and Serilog</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2022/implementing-correlation-ids-fsharp-giraffe-serilog/"/>
    <id>https://glorifiedgluer.com/blog/2022/implementing-correlation-ids-fsharp-giraffe-serilog/</id>
    <published>2022-08-27T00:00:00Z</published>
    <updated>2022-08-27T00:00:00Z</updated>
    <summary>S√£o Paulo&amp;#39;s Penha subway station. (2022-08-03)   I spent a stupid amount of time trying to setup an ASP.NET Middleware to handle correlation IDs on requests. I must confess that I just got my first .NET and F#1 job, therefore most of the time spent was just getting used to the whole ecosystem. However during my trial and error I saw a bunch of blog posts showing me how to do this in different manners and a lot discussions about the correct order to implement things.</summary>
    <content type="html">&lt;figure&gt;&lt;img src=&#34;/img/2022-08-03-penha-station.jpg&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;S√£o Paulo&amp;#39;s Penha subway station. (2022-08-03)&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I spent a stupid amount of time trying to setup an &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-6.0&#34;&gt;ASP.NET Middleware&lt;/a&gt; to handle
correlation IDs on requests. I must confess that I just got my first .NET &lt;strong&gt;and&lt;/strong&gt;
F#&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; job, therefore most of the time spent was just getting used to the
whole ecosystem. However during my trial and error I saw a bunch of blog posts
showing me how to do this in different manners and a lot discussions about the
correct order to implement things.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A correlation ID is a unique ID that is assigned to every transaction. So, when
a transaction becomes distributed across multiple services, we can follow that
transaction across different services using the logging information. &amp;mdash; Gaurav
Kumar Aroraa, Lalit Kale and Kanwar Manish&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was written with the following versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET SDK 6.0.400&lt;/li&gt;
&lt;li&gt;Giraffe 6.0.0 - &lt;code&gt;dotnet add package Giraffe -v 6.0.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Serilog 2.11.0 - &lt;code&gt;dotnet add package Serilog -v 2.11.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Serilog.AspNetCore - &lt;code&gt;dotnet add package Serilog.AspNetCore -v 6.0.1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;importing-the-needed-modules&#34;&gt;Importing the needed modules&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s get started by importing all the needed packages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;fsharp&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-fsharp hljs&#34; data-lang=&#34;fsharp&#34;&gt;open System
open Microsoft.AspNetCore.Builder
open Microsoft.AspNetCore.Http
open Microsoft.Extensions.DependencyInjection
open Microsoft.Extensions.Hosting
open Microsoft.AspNetCore.Hosting

open Giraffe
open Serilog
open Serilog.Context&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;fsharp&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h2 id=&#34;starting-the-web-host&#34;&gt;Starting the web host&lt;/h2&gt;
&lt;p&gt;Differently from &lt;a href=&#34;https://saturnframework.org/&#34;&gt;Saturn&lt;/a&gt;, Giraffe doesn&amp;rsquo;t have a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions&#34;&gt;computation expression&lt;/a&gt; to
configure our web host. With that in mind, the code below must do the job.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;fsharp&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-fsharp hljs&#34; data-lang=&#34;fsharp&#34;&gt;module Entry =
    open Configuration

    Log.Logger &amp;lt;-
        LoggerConfiguration()
            .Enrich.FromLogContext()
            .WriteTo.Console(
                outputTemplate = &amp;#34;[{Timestamp:HH:mm:ss} {CorrelationId} {Level:u3}] {Message:lj}{NewLine}{Exception}&amp;#34;
            )
            .CreateLogger()

    [&amp;lt;EntryPoint&amp;gt;]
    let main args =
        Host
            .CreateDefaultBuilder(args)
            .ConfigureWebHost(configureWebHost)
            .UseSerilog()
            .Build()
            .Run()

        0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;fsharp&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;The key parts of the code are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.Enrich.FromLogContext()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;outputTemplate&lt;/code&gt; containing the &lt;code&gt;CorrelationId&lt;/code&gt; property&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will define the &lt;code&gt;configureWebHost&lt;/code&gt; in another module called &lt;code&gt;Configuration&lt;/code&gt;.
This same module contains other helper functions related to the Host
configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;fsharp&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-fsharp hljs&#34; data-lang=&#34;fsharp&#34;&gt;module Configuration =
    let configureApp (builder: IApplicationBuilder) =
        builder
            .UseMiddleware&amp;lt;Middleware.CorrelationId&amp;gt;()
            .UseGiraffe Endpoint.router

    let configureServices (services: IServiceCollection) = services.AddGiraffe() |&amp;gt; ignore

    let configureWebHost (builder: IWebHostBuilder) =
        builder
            .Configure(configureApp)
            .ConfigureServices(configureServices)
            .UseKestrel()
            .UseUrls([| &amp;#34;http://0.0.0.0:8000&amp;#34; |])
            .UseWebRoot(&amp;#34;/&amp;#34;)
        |&amp;gt; ignore&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;fsharp&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;Here we can see a &lt;code&gt;Middleware.CorrelationId&lt;/code&gt; being implemented as an ASP.NET
Middleware.&lt;/p&gt;
&lt;h2 id=&#34;implementing-the-middleware&#34;&gt;Implementing the middleware&lt;/h2&gt;
&lt;p&gt;The mechanism of this middleware is quite simple. One of the possible ways to
implement a correlation ID propagation on web APIs is to pass a unique value as
request header. In our case, it will be passed around on a header key called
&lt;code&gt;X-Correlation-Id&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;fsharp&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-fsharp hljs&#34; data-lang=&#34;fsharp&#34;&gt;module Middleware =
    type CorrelationId(next: RequestDelegate) =
        member this.Invoke(context: HttpContext) =
            let headerName = &amp;#34;X-Correlation-Id&amp;#34;
            let logPropertyName = &amp;#34;CorrelationId&amp;#34;

            let success, value =
                context.Request.Headers.TryGetValue headerName

            let correlationId =
                if success
                then value.ToString()
                else Guid.NewGuid().ToString()

            context.Response.Headers.Add(headerName, correlationId)

            using (LogContext.PushProperty(logPropertyName, correlationId)) (fun _ -&amp;gt;
                next.Invoke(context)
            )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;fsharp&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;The logic is the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check if there&amp;rsquo;s a value on the &lt;code&gt;X-Correlation-Id&lt;/code&gt; header key&lt;/li&gt;
&lt;li&gt;If there&amp;rsquo;s a value, we turn this into a string. Otherwise, we create a Guid as the correlation id.&lt;/li&gt;
&lt;li&gt;Add the header to the response with the extracted correlation id&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;testing-with-an-actual-request&#34;&gt;Testing with an actual request&lt;/h2&gt;
&lt;p&gt;For a testing purpose, let&amp;rsquo;s create a &lt;em&gt;Hello, World!&lt;/em&gt; endpoint with a simple
log.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;fsharp&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-fsharp hljs&#34; data-lang=&#34;fsharp&#34;&gt;module Endpoint =
    let HelloHandler: HttpHandler =
        fun (next: HttpFunc) (ctx: HttpContext) -&amp;gt;
            Log.Information &amp;#34;Helloing the world!&amp;#34;
            json {| message = &amp;#34;Hello, World!&amp;#34; |} next ctx

    let router = route &amp;#34;/&amp;#34; &amp;gt;=&amp;gt; HelloHandler&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;fsharp&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;Doing a simple request through a web browser should return a basic &lt;code&gt;{ &amp;quot;message&amp;quot;: &amp;quot;Hello, World!&amp;quot; }&lt;/code&gt; json text and show a your console should show the correlation
id of our request.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;text&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-text hljs&#34; data-lang=&#34;text&#34;&gt;[20:34:49  INF] Application started. Press Ctrl&amp;#43;C to shut down.
[20:34:49  INF] Hosting environment: Production
[20:34:49  INF] Content root path: /home/user/foo/barr
[20:34:49  INF] Request starting HTTP/1.1 GET http://localhost:8000/ - -
[20:34:49 fe7b6dd7-eec4-4792-9fda-de814ef5dd14 INF] Helloing the world!
[20:34:50  INF] Request finished HTTP/1.1 GET http://localhost:8000/ - - - 200 27 application/json;&amp;#43;charset=utf-8 1126.8972ms&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;text&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;It has been my first &lt;em&gt;production&lt;/em&gt; encounter with functional programming and I&amp;rsquo;m loving it! ü§ì&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>ErgoJourney - Choosing a new keyboard layout</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2022/ergojourney-choosing-a-new-keyboard-layout/"/>
    <id>https://glorifiedgluer.com/blog/2022/ergojourney-choosing-a-new-keyboard-layout/</id>
    <published>2022-07-18T00:00:00Z</published>
    <updated>2022-07-18T00:00:00Z</updated>
    <summary>After multiple injuries to my right wrist due to a multitude of activities (sports, bad typing1 and an act of god) I decided to change my keyboard layout to one that could possibly demand less work off of my hands.
First let&amp;rsquo;s go through a small history of keyboards I&amp;rsquo;ve previously used. Unfortunately I don&amp;rsquo;t actually have pictures of them as I don&amp;rsquo;t have the habit to take pictures of things (which I should reconsider!</summary>
    <content type="html">&lt;p&gt;After multiple injuries to my right wrist due to a multitude of activities
(sports, bad typing&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; and an &lt;em&gt;act of god&lt;/em&gt;) I decided to change my keyboard layout
to one that could possibly demand less work off of my hands.&lt;/p&gt;
&lt;p&gt;First let&amp;rsquo;s go through a small history of keyboards I&amp;rsquo;ve previously used.
Unfortunately I don&amp;rsquo;t actually have pictures of them as I don&amp;rsquo;t have the habit
to take pictures of things (which I should reconsider!). Briefly, the complete
list is the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;IBM Model M&lt;/li&gt;
&lt;li&gt;ThinkPad X230&lt;/li&gt;
&lt;li&gt;HyperX Alloy FPS Pro (Cherry MX Blue)&lt;/li&gt;
&lt;li&gt;Keychron K2V2 (Cherry MX Red)&lt;/li&gt;
&lt;li&gt;Corne V3 (failed attempt, the PCB wasn&amp;rsquo;t delivered)&lt;/li&gt;
&lt;li&gt;SZA Moonlander Mark I&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;previously-used-keyboards&#34;&gt;Previously used keyboards&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s talk about the keyboards I have owned for the past decade.
There was a place near (S√£o Paulo is huge but everything is close if you can
walk to the subway) my work called &lt;em&gt;Santa Efig√™nia&lt;/em&gt;. At the time, this was the
biggest place to go look after tech gadgets here in S√£o Paulo.&lt;/p&gt;
&lt;p&gt;As all places like this, there were a lot of second-hand shops. Places that
bought boxes after boxes of old corporate hardware. And this is how I got my
hands on an &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Model_M_keyboard&#34;&gt;IBM Model M&lt;/a&gt;&lt;/strong&gt;! I&amp;rsquo;m going to be honest with you, I didn&amp;rsquo;t know it was
a &lt;em&gt;rare&lt;/em&gt; keyboard nor that it was an icon of some sort. I just liked the design
and bought it for a cheap price as it was the cooler PS/2 keyboard I could find
there.&lt;/p&gt;
&lt;p&gt;After selling my &lt;em&gt;Model M&lt;/em&gt; way cheaper than I should (üò≠) I got a &lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ThinkPad_X_series#X230&#34;&gt;ThinkPad
X230&lt;/a&gt;&lt;/strong&gt; that I used for about 10 years or so. I really liked the feeling of the
keyboard and even tried to mod it to use the X220 but I have the unpopular
opinion that the X230 has the best keyboard.&lt;/p&gt;
&lt;p&gt;While using my &lt;em&gt;X230&lt;/em&gt; I finally discovered what a mechanical keyboard is &lt;del&gt;and
instantly regretted my decisions on the &lt;em&gt;Model M&lt;/em&gt;&lt;/del&gt; and got a &lt;strong&gt;&lt;a href=&#34;https://row.hyperx.com/pt-br/products/hyperx-alloy-fps-pro-mechanical-gaming-keyboard&#34;&gt;HyperX Alloy FPS
Pro&lt;/a&gt;&lt;/strong&gt; with &lt;em&gt;Cherry MX Blue&lt;/em&gt; switches for a steal. For the price I paid it was an
actually OK keyboard, however the full price was not worth it in my opinion. I
found the switch too heavy for hours of typing and the sound was just&amp;hellip; weird.
I can&amp;rsquo;t explain but for me it was not that pleasant type on it. Anyway, I ended
up selling it too.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;current-keyboard&#34;&gt;Current keyboard&lt;/h2&gt;
&lt;p&gt;My current keyboard is the &lt;a href=&#34;https://www.keychron.com/products/keychron-k2-hot-swappable-wireless-mechanical-keyboard&#34;&gt;Keychron K2 Version 2&lt;/a&gt;. It&amp;rsquo;s Wireless, Hot-swappable
(meaning that I can &lt;em&gt;swap&lt;/em&gt; the switches), Compact layout (84 keys&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;) and
Gateron G Red Switch (pre-lubed).&lt;/p&gt;
&lt;p&gt;Some things I learned with this keyboard is that I more fond of linear switches
than clicky/tactile ones. The thing that bothered me the most is that the
keycaps accumulated a lot of grease and started to get too shiny&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h2 id=&#34;future-keyboards&#34;&gt;Future Keyboards&lt;/h2&gt;
&lt;h3 id=&#34;corne-v3&#34;&gt;Corne V3&lt;/h3&gt;
&lt;p&gt;One of the first things you discover when you start to look after ergonomic
keyboards is that you can build one yourself. There is a multitude of
communities, projects and contents over the internet.&lt;/p&gt;
&lt;p&gt;I really liked some models:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/davidphilipbarr/Sweep&#34;&gt;Sweep&lt;/a&gt; is a &lt;em&gt;34 keys&lt;/em&gt; split keyboard. I wanted a bit more keys, so I
discarded this one.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/diepala/cantor/&#34;&gt;Cantor&lt;/a&gt; is a &lt;em&gt;42 keys&lt;/em&gt; split keyboard. The problem with this one is that I
couldn&amp;rsquo;t find the required low-profile switches for cheap, so I discarded
this option. However, it was my favorite design!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/foostan/crkbd&#34;&gt;Corne&lt;/a&gt; is a &lt;em&gt;36 keys&lt;/em&gt; split keyboard. This is probably the most famous split
keyboard. I chose it because it was basically the cheapest option for me and
also had more keys than Sweep.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Although I bought everything needed to start soldering the Corne together, my
country&amp;rsquo;s post office probably lost my PCB during delivery. So I don&amp;rsquo;t have much
to say about, if they happen to deliver it I might write about my experience
soldering it or just straight out buy the &lt;a href=&#34;https://keyhive.xyz/shop/corne-v3&#34;&gt;complete kit from KeyHive&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;sza-moonlader-mark-i&#34;&gt;SZA Moonlader Mark I&lt;/h3&gt;
&lt;p&gt;At the moment I&amp;rsquo;m waiting for my &lt;a href=&#34;https://www.zsa.io/moonlander/&#34;&gt;Moonlander SZA Mark I&lt;/a&gt; to arrive. I didn&amp;rsquo;t do
much research on the keyboard as I wasn&amp;rsquo;t intending on buying one (too expensive
here) and instead I got one as a gift! Given this, I thought it would be cool to wait
for a cool unboxing experience to a novel technology for me.&lt;/p&gt;
&lt;h2 id=&#34;drinking-the-colemak-kool-aid&#34;&gt;Drinking the Colemak Kool-Aid&lt;/h2&gt;
&lt;p&gt;Considering this huge introduction, my conclusion was that I should probably
take advantage of this new keyboard form I&amp;rsquo;m getting and learn a new keyboard
layout. This might give me some benefits upon my wrist injuries and make typing
less painful.&lt;/p&gt;
&lt;p&gt;I was between &lt;a href=&#34;https://en.wikipedia.org/wiki/Dvorak_keyboard_layout&#34;&gt;Dvorak&lt;/a&gt; and &lt;a href=&#34;https://colemak.com/&#34;&gt;Colemak&lt;/a&gt; but the thing is, all the discussions around
these layouts seemed to be mostly about personal preferences so I decided to
pick one with the most sensible technique: &lt;strong&gt;the coin flip&lt;/strong&gt; and the coin told me
to go with Colemak.&lt;/p&gt;
&lt;p&gt;Through my small research I found out that Colemak ships by default on most
Linux distros and it works very good with other languages (Brazilian Portuguese
üáßüá∑).&lt;/p&gt;
&lt;p&gt;I guess that the only thing left is to practice typing on it now!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;I&amp;rsquo;ve never learned how to touch type correctly and as such I only use at most 3 fingers on each hand.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yuri-potatoq&#34;&gt;Yuri&lt;/a&gt; was the friend of mine that bought it and actually liked to type on it. Different people, different switch tastes. üòä&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Most known as a 75% layout.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;I fixed this with a cheap &lt;a href=&#34;https://pt.aliexpress.com/item/32946133227.html&#34;&gt;keyset from AliExpress&lt;/a&gt; that meant to go to my Corne V3.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Moving this website to a single Org Mode file</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2022/moving-site-org-mode/"/>
    <id>https://glorifiedgluer.com/blog/2022/moving-site-org-mode/</id>
    <published>2022-07-11T00:00:00Z</published>
    <updated>2022-07-11T00:00:00Z</updated>
    <summary>I have always loved GNU Emacs and its integrated computing environment. It has been even better after I started using Doom Emacs1, it basically took care of things I was unable to do properly: make it fast and semantically coherent. Either for the lack of time or technical knowledge.
As most GNU Emacs users, I love Org Mode and I love to write for this blog. So why not join these two things together?</summary>
    <content type="html">&lt;p&gt;I have always loved &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;GNU Emacs&lt;/a&gt; and its integrated computing environment. It has
been even better after I started using &lt;a href=&#34;https://github.com/doomemacs/doomemacs&#34;&gt;Doom Emacs&lt;/a&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, it basically took care of
things I was unable to do properly: make it fast and semantically coherent.
Either for the lack of time or technical knowledge.&lt;/p&gt;
&lt;p&gt;As most GNU Emacs users, I love &lt;a href=&#34;https://orgmode.org/&#34;&gt;Org Mode&lt;/a&gt; and I love to write for this blog. So
why not join these two things together? &lt;a href=&#34;https://ox-hugo.scripter.co/&#34;&gt;ox-hugo&lt;/a&gt; let&amp;rsquo;s me write a &lt;em&gt;org&lt;/em&gt; file and
turn it into multiple &lt;em&gt;hugo-compatible&lt;/em&gt; markdown files. This is quite a feature
for me as I like to keep all my &lt;em&gt;stuff&lt;/em&gt; into one place&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;It would be pretty cool to have a place to share small trips with pictures and
some comments. Thinking about it a bit more, it might work like some sort of
microblog but&amp;hellip; different? I should start doing it and stop ovethinking. It
would be pretty cool to read a huge file with years of history written on it!&lt;/p&gt;
&lt;p&gt;Oh, and you can see the file I&amp;rsquo;m talking about right here:
&lt;a href=&#34;https://git.sr.ht/~glorifiedgluer/monorepo/blob/main/glorifiedgluercom/content/content.org&#34;&gt;sourcehut:~glorifiedgluer/monorepo/glorifiedgluercom/content/content.org&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;For the past few weeks it has been even better with the work of
&lt;a href=&#34;https://github.com/thiagokokada&#34;&gt;github:thiagokokada&lt;/a&gt; on the &lt;a href=&#34;https://github.com/nix-community/nix-doom-emacs/&#34;&gt;github:nix-community/nix-doom-emacs&lt;/a&gt; repository.
Really, kudos for taking care of this project! üéâ&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;/blog/2022/starting-a-personal-monorepo/&#34;&gt;Starting a personal monorepo&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Git mirroring, systemd and NixOS</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2022/git-mirroring-systemd-nixos/"/>
    <id>https://glorifiedgluer.com/blog/2022/git-mirroring-systemd-nixos/</id>
    <published>2022-06-14T00:00:00Z</published>
    <updated>2022-06-14T00:00:00Z</updated>
    <summary>For the past few years I have been collecting contributions to multiple projects on multiple platforms such as GitHub, GitLab, self-hosted Gitea instances and so on. It&amp;rsquo;s rather boring to go to a website and see the source code there&amp;hellip; Then I thought to myself: &amp;ldquo;Why not write about a made up need I don&amp;rsquo;t have just to learn something new?&amp;rdquo;.
So, the idea here was to mirror those repositories into my sourcehut account (although this should work for any remote repository).</summary>
    <content type="html">&lt;p&gt;For the past few years I have been collecting contributions to multiple projects
on multiple platforms such as GitHub, GitLab, self-hosted Gitea instances and so
on. It&amp;rsquo;s rather boring to go to a website and see the source code there&amp;hellip; Then
I thought to myself: &amp;ldquo;Why not write about a made up need I don&amp;rsquo;t have just to
learn something new?&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;So, the idea here was to mirror those repositories into my &lt;a href=&#34;https://sourcehut.org&#34;&gt;sourcehut&lt;/a&gt; account
(although this should work for any remote repository). For this we will use a
&lt;a href=&#34;https://nixos.org&#34;&gt;NixOS&lt;/a&gt; system and &lt;a href=&#34;https://www.freedesktop.org/software/systemd/man/systemd.timer.html&#34;&gt;systemd timers&lt;/a&gt;. The idea is dead simple, we clone the
repositories and push them to our desired remote.&lt;/p&gt;
&lt;h2 id=&#34;configuring-the-repository&#34;&gt;Configuring the repository&lt;/h2&gt;
&lt;p&gt;This step is pretty easy and can be done in two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the repository&lt;/li&gt;
&lt;/ol&gt;
&lt;!--listend--&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;sh&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-sh hljs&#34; data-lang=&#34;sh&#34;&gt;$ git clone --mirror https://git.com/repo&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;sh&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;ol&gt;
&lt;li&gt;Configure the remote as to ensure that we will only push to the
desired remote.&lt;/li&gt;
&lt;/ol&gt;
&lt;!--listend--&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;sh&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-sh hljs&#34; data-lang=&#34;sh&#34;&gt;$ cd repo
$ git remote set-url --push origin https://remote.com/repo-mirror&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;sh&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h2 id=&#34;systemd-to-the-rescue&#34;&gt;systemd to the rescue&lt;/h2&gt;
&lt;p&gt;We have our repository but we are still missing an important step that is to
keep pushing new changes to our mirror.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nixos.org&#34;&gt;NixOS&lt;/a&gt; has a pretty good declarative way of declaring systemd services and timers
that we can take advantage of here. The idea is to have a script being ran in
our diretory through a systemd &lt;em&gt;service&lt;/em&gt; that will be invoked by a systemd
&lt;em&gt;timer&lt;/em&gt; hourly.&lt;/p&gt;
&lt;h3 id=&#34;the-script&#34;&gt;The script&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s nothing novel here. This script will iterate over the directories inside
the &lt;code&gt;WorkingDirectory&lt;/code&gt;, fetch updates and then push it to our mirror.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;nix&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-nix hljs&#34; data-lang=&#34;nix&#34;&gt;let
  gitmirrorScript = pkgs.writeShellScriptBin &amp;#34;gitmirror&amp;#34; &amp;#39;&amp;#39;
    for d in */ ; do
      git -C &amp;#34;$d&amp;#34; fetch -p origin
      git -C &amp;#34;$d&amp;#34; push --mirror
    done
  &amp;#39;&amp;#39;;
in&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;nix&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h3 id=&#34;the-service-and-timer&#34;&gt;The service and timer&lt;/h3&gt;
&lt;p&gt;The service is rather simple too, we pass our repository&amp;rsquo;s directory through the
&lt;code&gt;WorkingDirectory&lt;/code&gt; value and set the &lt;code&gt;gitmirror&lt;/code&gt; service as the unit to be
invoked by our timer. Note, however, that we added &lt;code&gt;git&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;openssh&lt;/code&gt; to the
path. Your root user should be able to authenticate on boths repos with its ssh
key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;nix&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-nix hljs&#34; data-lang=&#34;nix&#34;&gt;{
  systemd.services.gitmirror = {
    enable = true;
    description = &amp;#34;Git mirror service&amp;#34;;
    after = [ &amp;#34;network.target&amp;#34; ];
    path = with pkgs; [ git openssh ];
    serviceConfig = {
      Type=&amp;#34;oneshot&amp;#34;;
      WorkingDirectory = &amp;#34;/home/glorifiedgluer/repo&amp;#34;;
      ExecStart = &amp;#34;${gitmirrorScript}/bin/gitmirror&amp;#34;;
    };
    wantedBy = [ &amp;#34;multi-user.target&amp;#34; ];
  };

  systemd.timers.gitmirror = {
    description = &amp;#34;Git mirror timer&amp;#34;;
    timerConfig = {
      OnCalendar = &amp;#34;hourly&amp;#34;;
      Unit = &amp;#34;gitmirror.service&amp;#34;;
    };
    wantedBy = [ &amp;#34;timers.target&amp;#34; ];
  };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;nix&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Starting a personal monorepo</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2022/starting-a-personal-monorepo/"/>
    <id>https://glorifiedgluer.com/blog/2022/starting-a-personal-monorepo/</id>
    <published>2022-05-11T00:00:00Z</published>
    <updated>2022-05-11T00:00:00Z</updated>
    <summary>I&amp;rsquo;ve been using Nix as my package manager for 4 years now and it has been the best computer-related decision I have ever made and fortunately, for the past few years its ecosystem has been growing a lot1 , 2 , 3. Some of this movement is due to the advent o Flakes that makes it way easier to share reproducible outputs than the previous Nix solution of channels.
Considering that I can use Nix:</summary>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve been using &lt;a href=&#34;https://nixos.org&#34;&gt;Nix&lt;/a&gt; as my package manager for 4 years now and it has been the
best &lt;em&gt;computer-related&lt;/em&gt; decision I have ever made and fortunately, for the past
few years its ecosystem has been growing a lot&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;, &lt;/sup&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup&gt;, &lt;/sup&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Some of this
movement is due to the advent o &lt;a href=&#34;https://nixos.wiki/wiki/Flakes&#34;&gt;Flakes&lt;/a&gt; that makes it &lt;em&gt;way&lt;/em&gt; easier to share
reproducible outputs than the previous Nix solution of channels.&lt;/p&gt;
&lt;p&gt;Considering that I can use Nix:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;to share build artifacts (binaries, Nix modules and such);&lt;/li&gt;
&lt;li&gt;to manage my dependencies;&lt;/li&gt;
&lt;li&gt;as a build system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I thought to myself: &amp;ldquo;Why not build a personal monorepo&amp;rdquo;? I mean, this might
sound like a weird conclusion to take from all of this but I can explain! I
swear!&lt;/p&gt;
&lt;h2 id=&#34;rationale&#34;&gt;Rationale&lt;/h2&gt;
&lt;p&gt;Sometimes I just get bored setting up a new project. Create a new repository,
setup the dependencies, write a CI manifest&amp;hellip; it&amp;rsquo;s too tiresome! I won&amp;rsquo;t even
mention the pain in the ass that is to write multiple projects on the multiple
machines. The clone, fetch, pull and push dance is just too much when I could be
coding already.&lt;/p&gt;
&lt;p&gt;Most of my personal projects are written in &lt;a href=&#34;https://go.dev&#34;&gt;Go&lt;/a&gt;, a really boring language that
takes its time to include new features and release new versions. This means that
an update won&amp;rsquo;t break them and that I can take advantage of a way to share the
same compiler and tooling version through my projects.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re a Nix user, a single command would show you all the outputs available
for use: &lt;code&gt;nix flake show sourcehut:~glorifiedgluer/monorepo&lt;/code&gt;. This also means
that you can import this repo as an input on your &lt;code&gt;flake.nix&lt;/code&gt; file and use any
of my projects as you please.&lt;/p&gt;
&lt;p&gt;The CI can be simplified to a simple shell conditional:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;yaml&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-yaml hljs&#34; data-lang=&#34;yaml&#34;&gt;tasks:
  - someproject: |
      cd monorepo
      if ! $(git diff --quiet HEAD HEAD^ -- &amp;#34;someproject&amp;#34;)
      then
        # do something if the project got an update
      fi&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;yaml&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;Nonetheless, the best reason to try this is out is to have some fun and explore
new challenges with version control and build systems! ;-)&lt;/p&gt;
&lt;h2 id=&#34;expectation&#34;&gt;Expectation&lt;/h2&gt;
&lt;p&gt;I mean&amp;hellip; none? lol. Being serious now, I don&amp;rsquo;t expect my projects to become
something used by hundreds or thousands of users as most of them are done out of
passion/need. So the rationale above is composed of things that personally took
out part of the joy of bulding out something and seeing it run.&lt;/p&gt;
&lt;p&gt;Is this going to work? I have no idea as I don&amp;rsquo;t have much experience with
monorepos. I&amp;rsquo;m not really sure if this is going to scale or bore me in other
ways. The only certainty I have is that I&amp;rsquo;m having fun doing it &lt;em&gt;right now&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;You can see the repository on the links below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ratsclub/monorepo&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~glorifiedgluer/monorepo/&#34;&gt;sourcehut&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.replit.com/nix&#34;&gt;https://blog.replit.com/nix&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://shopify.engineering/what-is-nix&#34;&gt;https://shopify.engineering/what-is-nix&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://hercules-ci.com/&#34;&gt;https://hercules-ci.com/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Running a Raspberry Pi 4 with NixOS</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2022/running-a-raspberry-pi-4-with-nixos/"/>
    <id>https://glorifiedgluer.com/blog/2022/running-a-raspberry-pi-4-with-nixos/</id>
    <published>2022-05-09T00:00:00Z</published>
    <updated>2022-05-09T00:00:00Z</updated>
    <summary>For quite some time I&amp;rsquo;ve been wanting to run a small homelab with NixOS. I don&amp;rsquo;t host much services myself, however I feel that I can have a lot of fun (and learn a bit) by maintaining my own server. All the services I run on the Cloud‚Ñ¢ (Matrix Dendrite and a Nix Binary Cache) could be running on a Raspberry Pi inside my drawer. So that be it!
 Figure 1: A picture of Raspberry Pi inside an Argon One case and a Keychron K2V2 behind</summary>
    <content type="html">&lt;p&gt;For quite some time I&amp;rsquo;ve been wanting to run a small homelab with &lt;a href=&#34;https://nixos.org&#34;&gt;NixOS&lt;/a&gt;. I don&amp;rsquo;t
host much services myself, however I feel that I can have a lot of fun (and
learn &lt;em&gt;a bit&lt;/em&gt;) by maintaining my own server. All the services I run on the
Cloud‚Ñ¢ (Matrix Dendrite and a Nix Binary Cache) could be running on a Raspberry
Pi inside my drawer. So that be it!&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;/img/raspberry-argon.jpg&#34;
         alt=&#34;Figure 1: A picture of Raspberry Pi inside an Argon One case and a Keychron K2V2 behind&#34;/&gt;&lt;figcaption&gt;
            &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;A picture of Raspberry Pi inside an Argon One case and a Keychron K2V2 behind&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;At the time of writing my setup looks like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Case Argon ONE M.2&lt;/li&gt;
&lt;li&gt;KingSpec SSD M.2 SATA - 512GB&lt;/li&gt;
&lt;li&gt;Random Flash Drive - 8GB (you can also use a SD Card)&lt;/li&gt;
&lt;li&gt;Raspberry Pi 4 - 8GB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;flashing&#34;&gt;Flashing&lt;/h2&gt;
&lt;p&gt;Download the NixOS &lt;code&gt;aarch64&lt;/code&gt; image. Personally I went with the &lt;a href=&#34;https://hydra.nixos.org/job/nixos/trunk-combined/nixos.sd_image_new_kernel.aarch64-linux&#34;&gt;unstable branch&lt;/a&gt;
as I like to live dangerously but you can choose &lt;a href=&#34;https://nixos.wiki/wiki/NixOS_on_ARM#SD_card_images_.28SBCs_and_similar_platforms.29&#34;&gt;other versions&lt;/a&gt; if you want to.
After that you just need to &lt;code&gt;dd&lt;/code&gt; it to your flash drive and boot it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;$ sudo dd if=nixos.img of=/dev/sdX bs=4096 conv=fsync status=progress&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t forget to extract the image before flashing it.&lt;/li&gt;
&lt;li&gt;If using the Argon One M.2 case, don&amp;rsquo;t boot the USB Drive with your SSD connected. Otherwise your raspberry will try to boot from the SSD and not your Flash Drive/SD Card.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;formatting&#34;&gt;Formatting&lt;/h2&gt;
&lt;p&gt;You can actually follow the &lt;a href=&#34;https://nixos.org/manual/nixos/stable&#34;&gt;NixOS Manual&lt;/a&gt; to partition your hard drive. However
I&amp;rsquo;ve written a script to help me do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;# replace /dev/sda with your SSD
export FMT_DISK=/dev/sda

wipefs -a $FMT_DISK

export DISK=/dev/disk/by-id/ata*

parted $FMT_DISK -- mklabel msdos
parted $FMT_DISK -- mkpart primary fat32 0MiB 512MiB # $DISK-part1 is /boot
parted $FMT_DISK -- mkpart primary 512MiB -4GiB # $DISK-part2 is the ext4 partition
parted $FMT_DISK -- mkpart primary linux-swap -4GiB 100% # Swap

mkfs.ext4 -L nixos $DISK-part2
mount $DISK-part2 /mnt

mkfs.vfat -F32 $DISK-part1
mkdir -p /mnt/boot
mount $DISK-part1 /mnt/boot&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h2 id=&#34;nixos-configuration&#34;&gt;NixOS Configuration&lt;/h2&gt;
&lt;p&gt;In order to boot correctly, you need to define some boot options&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;nix&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-nix hljs&#34; data-lang=&#34;nix&#34;&gt;{
  boot = {
    initrd.availableKernelModules = [ &amp;#34;usbhid&amp;#34; &amp;#34;usb_storage&amp;#34; ];
    kernelPackages = pkgs.linuxPackages_rpi4;
    kernelParams = [
      &amp;#34;8250.nr_uarts=1&amp;#34;
      &amp;#34;cma=128M&amp;#34;
      &amp;#34;console=tty1&amp;#34;
      &amp;#34;console=ttyAMA0,115200&amp;#34;
    ];

    loader = {
      raspberryPi = {
        enable = true;
        version = 4;
      };

      grub.enable = false;
      generic-extlinux-compatible.enable = true;
    };
  };

  hardware.enableRedistributableFirmware = true;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;nix&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h2 id=&#34;boot-firmware&#34;&gt;Boot firmware&lt;/h2&gt;
&lt;p&gt;The installer disk has a partition containing the necessary firmwares to boot
(it was on &lt;code&gt;/dev/sda1/&lt;/code&gt; for me). Just copy it to your boot partition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;mkdir /firmware
mount /dev/sda1 /firmware
cp /firmware/* /mnt/boot&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;
&lt;h3 id=&#34;with-channels&#34;&gt;With Channels&lt;/h3&gt;
&lt;p&gt;The only step left is to install the system:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;nixos-install --root /mnt&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h3 id=&#34;with-flakes&#34;&gt;With Flakes&lt;/h3&gt;
&lt;p&gt;Another way to install it is to make use of Nix &lt;a href=&#34;https://nixos.wiki/wiki/Flakes&#34;&gt;Flakes&lt;/a&gt;. This way we can ensure
that our build is completely reproducible and/or running the same software
version as the other machines.&lt;/p&gt;
&lt;p&gt;This is a rather simple process if you already have a repo configured with your
&lt;a href=&#34;https://nixos.org&#34;&gt;NixOS&lt;/a&gt; configurations. First, I need a shell with &lt;code&gt;git&lt;/code&gt; and a &lt;a href=&#34;https://nixos.org&#34;&gt;Nix&lt;/a&gt; version that
supports the experimental &lt;a href=&#34;https://nixos.wiki/wiki/Flakes&#34;&gt;Flakes&lt;/a&gt; commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;nix-shell -p git nixUnstable&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;After that I just clone my repository, copy the &lt;code&gt;hardware-configuration.nix&lt;/code&gt;
file over and install the system.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;shell&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-shell hljs&#34; data-lang=&#34;shell&#34;&gt;# clone the repository
git clone https://git.sr.ht/~glorifiedgluer/dotfiles
cd dotfiles

# copy hardware-configuration.nix
cp /mnt/etc/nixos/hardware-configuration.nix hosts/rpi4/

# install the system
nixos-install --flake .#rpi4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;shell&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://nixos.wiki/wiki/NixOS_on_ARM/Raspberry_Pi_4#Configuration&#34;&gt;https://nixos.wiki/wiki/NixOS_on_ARM/Raspberry_Pi_4#Configuration&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Notes on builds.sr.ht</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2022/notes-on-buildssrht/"/>
    <id>https://glorifiedgluer.com/blog/2022/notes-on-buildssrht/</id>
    <published>2022-04-29T00:00:00Z</published>
    <updated>2022-04-29T00:00:00Z</updated>
    <summary>For the past few months I&amp;rsquo;ve been using sourcehut&amp;rsquo;s platform to work on software an it has been quite an interesting experience. Nonetheless, one of the services I really enjoy using is the their build service called builds.sr.ht.
 builds.sr.ht is a service on sr.ht that allows you to submit &amp;ldquo;build manifests&amp;rdquo; for us to work on. &amp;ndash; man.sr.ht
 The thing I don&amp;rsquo;t like on GitHub Actions is that it is kind of magical.</summary>
    <content type="html">&lt;p&gt;For the past few months I&amp;rsquo;ve been using &lt;a href=&#34;https://sr.ht&#34;&gt;sourcehut&lt;/a&gt;&amp;rsquo;s platform to work on software
an it has been quite an interesting experience. Nonetheless, one of the services
I really enjoy using is the their build service called &lt;a href=&#34;https://builds.sr.ht&#34;&gt;builds.sr.ht&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;builds.sr.ht is a service on sr.ht that allows you to submit &amp;ldquo;build manifests&amp;rdquo;
for us to work on. &amp;ndash; &lt;a href=&#34;https://man.sr.ht/builds.sr.ht/&#34;&gt;man.sr.ht&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The thing I don&amp;rsquo;t like on &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt; is that it is kind of &lt;em&gt;magical&lt;/em&gt;. For
example, you don&amp;rsquo;t actually know what it is doing when you define that an
&lt;code&gt;action&lt;/code&gt; should only run when a specific path is modified. Not to even mention
their &lt;a href=&#34;https://docs.github.com/pt/actions/creating-actions&#34;&gt;custom actions&lt;/a&gt; which usually takes a non-trivial amount of
TypeScript/JavaScript.&lt;/p&gt;
&lt;p&gt;Contrary to this, &lt;a href=&#34;https://builds.sr.ht&#34;&gt;builds.sr.ht&lt;/a&gt; is &lt;em&gt;really&lt;/em&gt; explicit on its &lt;a href=&#34;https://man.sr.ht/builds.sr.ht/manifest.md&#34;&gt;build manifest&lt;/a&gt;.
You&amp;rsquo;re basically expected to write plain shell scripts for your builds.&lt;/p&gt;
&lt;h2 id=&#34;reducing-resource-usage&#34;&gt;Reducing resource usage&lt;/h2&gt;
&lt;p&gt;As I said previously, there&amp;rsquo;s no special syntax to work on specific paths,
branches, pull requests and such. By default your task will run on every commit
you push. In order to reduce our CI usage we can restrain our tasks to run on
specific scenarios:&lt;/p&gt;
&lt;h3 id=&#34;on-path-change&#34;&gt;On path change&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;sh&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-sh hljs&#34; data-lang=&#34;sh&#34;&gt;if ! $(git diff --quiet HEAD HEAD^ -- &amp;#34;&amp;lt;your-path&amp;gt;&amp;#34;)
then
  # do something
fi&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;sh&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h3 id=&#34;on-branch-change&#34;&gt;On branch change&lt;/h3&gt;
&lt;p&gt;This tip was taken from &lt;a href=&#34;https://todo.sr.ht/~sircmpwn/builds.sr.ht/170&#34;&gt;issue #170&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;yaml&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-yaml hljs&#34; data-lang=&#34;yaml&#34;&gt;tasks:
- check-branch: |
   cd repo_name
   if [ &amp;#34;$(git rev-parse your-branch)&amp;#34; != &amp;#34;$(git rev-parse HEAD)&amp;#34; ]; then \
      complete-build; \
   fi&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;yaml&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h2 id=&#34;nixos-on-builds.sr.ht&#34;&gt;NixOS on builds.sr.ht&lt;/h2&gt;
&lt;p&gt;As I don&amp;rsquo;t like to write shell scripts I use Nix and this is my favorite feature
of this service. builds.sr.ht supports &lt;a href=&#34;https://nixos.org&#34;&gt;NixOS&lt;/a&gt; by default&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. This means that
we can leverage Nix Flakes for truly declarative and reproducible builds there!
Let&amp;rsquo;s consider a small example using &lt;a href=&#34;https://go.dev&#34;&gt;Go&lt;/a&gt; to show you how easy it really is. A
small &lt;code&gt;flake.nix&lt;/code&gt; containing the following content should suffice our needs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;nix&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-nix hljs&#34; data-lang=&#34;nix&#34;&gt;{
  inputs.nixpkgs.url = &amp;#34;github:nixos/nixpkgs/nixos-unstable&amp;#34;;

  outputs = { self, nixpkgs, ... }:
    let pkgs = import nixpkgs { system = &amp;#34;x86_64-linux&amp;#34;; };
    in
    {
      devShells.&amp;#34;x86_64-linux&amp;#34;.ci = with pkgs; mkShell {
        buildInputs = [ go golangci-lint ];
      };
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;nix&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;This definition is capable of giving us a shell containing Go and &lt;a href=&#34;https://github.com/golangci/golangci-lint&#34;&gt;golangci-lint&lt;/a&gt;
on &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s write the build manifest for our CI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;yaml&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-yaml hljs&#34; data-lang=&#34;yaml&#34;&gt;image: nixos/unstable
packages:
  - nixos.nixUnstable
environment:
  NIX_CONFIG: &amp;#34;experimental-features = nix-command flakes&amp;#34;
tasks:
  - lint: |
      cd source
      nix develop .#ci -c golangci-lint run
  - test: |
      cd source
      nix develop .#ci -c go test ./...
  - build: |
      cd source
      nix develop .#ci -c go build&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;yaml&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;And that&amp;rsquo;s it! We have our CI up and running with the guarantee of having our
tools being the same on every run. No sudden updates or unexpected behavior.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://nixos.org&#34;&gt;https://nixos.org&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>write: broken pipe</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2022/write-broken-pipe/"/>
    <id>https://glorifiedgluer.com/blog/2022/write-broken-pipe/</id>
    <published>2022-04-06T00:00:00Z</published>
    <updated>2022-04-06T00:00:00Z</updated>
    <summary>tl;dr: Kong Ingress Controller was the culprit. Its timeout setting was closing the connection before the file could be sent. /If you&amp;rsquo;re facing this issue in a long-lasting request, check your reverse proxy configuration, as it may have a different configuration than your application./ ;-)
At Grupo SBF we have an HTTP server written in Go that queries BigQuery and returns the result as a big csv file. However, after some time we sent a request and instead of a file, we received this error message:</summary>
    <content type="html">&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: &lt;a href=&#34;https://docs.konghq.com/kubernetes-ingress-controller/&#34;&gt;Kong Ingress Controller&lt;/a&gt; was the culprit. Its timeout setting was
closing the connection before the file could be sent. /If you&amp;rsquo;re facing this
issue in a long-lasting request, check your reverse proxy configuration, as it
may have a different configuration than your application./ ;-)&lt;/p&gt;
&lt;p&gt;At Grupo SBF we have an HTTP server written in &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; that queries &lt;a href=&#34;https://cloud.google.com/bigquery&#34;&gt;BigQuery&lt;/a&gt; and
returns the result as a &lt;strong&gt;big&lt;/strong&gt; csv file. However, after some time we sent a
request and instead of a file, we received this error message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;nil&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-nil hljs&#34; data-lang=&#34;nil&#34;&gt;write tcp 10.0.0.1:8080-&amp;gt;10.0.0.2:38302: write: broken pipe&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;nil&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;Well, this is quite a surprise as we haven&amp;rsquo;t seen this error message before&amp;hellip;
After all, what does it even mean? A quick Google search returned this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A condition in programming (also known in POSIX as EPIPE error code and SIGPIPE
signal), when a process requests an output to pipe or socket, which was closed
by peer. &amp;ndash; &lt;a href=&#34;https://en.wikipedia.org/wiki/Broken_pipe&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hmm, this &lt;em&gt;definitely&lt;/em&gt; shed some light on the problem. Considering that the HTTP
server is provided by the powerful &lt;a href=&#34;https://pkg.go.dev/net/http&#34;&gt;net/http&lt;/a&gt; package in Go&amp;rsquo;s standard library, we
might have some obvious places to check out.&lt;/p&gt;
&lt;p&gt;Cloudflare has a &lt;a href=&#34;https://blog.cloudflare.com/exposing-go-on-the-internet/&#34;&gt;great article&lt;/a&gt; talking about the default configuration on Go&amp;rsquo;s
HTTP server and how to avoid making mistakes with them. We jumped straight to
the article&amp;rsquo;s timeout section and checked if we didn&amp;rsquo;t forget to configure them.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;go&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-go hljs&#34; data-lang=&#34;go&#34;&gt;srv := &amp;amp;http.Server{
    ReadTimeout:  10 * time.Minute, // 10 minutes
    WriteTimeout: 10 * time.Minute,
    Addr:         &amp;#34;:8080&amp;#34;,
    Handler:      r,
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;go&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;For context, our application takes about 2 minutes to send a response so this
isn&amp;rsquo;t a problem for us as we have 10 minutes until a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504&#34;&gt;504 server error&lt;/a&gt; is
returned.&lt;/p&gt;
&lt;p&gt;To our amazement, sending the request to a local server returned no error
whatsoever. Comparing our local environment with production we also noticed that
our request was &lt;em&gt;dropped&lt;/em&gt; at exactly 1 minute of execution in production.
Therefore it must be something between our client and server!&lt;/p&gt;
&lt;p&gt;Knowing that we deploy to a Kubernetes cluster with a &lt;a href=&#34;https://docs.konghq.com/kubernetes-ingress-controller/&#34;&gt;Kong Ingress Controller&lt;/a&gt;
_{controlling} taking care of our reverse proxy, we checked its documentation
and&amp;hellip; Bingo! This is the root of our problem, as per the &lt;a href=&#34;https://docs.konghq.com/gateway/1.1.x/reference/proxy/#3-proxying-and-upstream-timeouts&#34;&gt;Kong Ingress
Controller Documentation&lt;/a&gt; the default timeout is &lt;code&gt;60_000&lt;/code&gt; milliseconds &amp;ndash; in
other words, 1 minute!&lt;/p&gt;
&lt;h2 id=&#34;replicating-the-behavior&#34;&gt;Replicating the behavior&lt;/h2&gt;
&lt;p&gt;Before trying something on our servers, why don&amp;rsquo;t we replicate this behavior
locally? For this purpose we can run a &lt;code&gt;nginx&lt;/code&gt; container and a simple Go HTTP
server with a similar functionality of our service.&lt;/p&gt;
&lt;p&gt;The idea behind the test is to setup an endpoint that takes a lot of time
writing on the buffer while our reverse proxy has a timeout of only 2 seconds.&lt;/p&gt;
&lt;h3 id=&#34;go-server-and-dockerfile&#34;&gt;Go server and Dockerfile&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;go&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-go hljs&#34; data-lang=&#34;go&#34;&gt;func main() {
    mux := http.NewServeMux()
    mux.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) {
        time.Sleep(time.Second * 10)

        // creating a large data size
        // that will take a long time to be written
        size := 900 * 1000 * 1000
        tpl := make([]byte, size)
        t, err := template.New(&amp;#34;page&amp;#34;).Parse(string(tpl))
        if err != nil {
            log.Printf(&amp;#34;error parsing template: %s&amp;#34;, err)
            return
        }

        if err := t.Execute(w, nil); err != nil {
            log.Printf(&amp;#34;error writing: %s&amp;#34;, err)
            return
        }
    })

    srv := &amp;amp;http.Server{
        ReadTimeout: 10 * time.Minute,
        WriteTimeout: 10 * time.Minute,
        Addr: &amp;#34;:8080&amp;#34;,
        Handler: mux,
    }

    log.Println(&amp;#34;server is running!&amp;#34;)
    log.Println(srv.ListenAndServe())
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;go&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;And then the Dockerfile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;Dockerfile&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-Dockerfile hljs&#34; data-lang=&#34;Dockerfile&#34;&gt;# server.Dockerfile
FROM golang:alpine AS build
RUN apk --no-cache add gcc g&amp;#43;&amp;#43; make git
WORKDIR /go/src/app
COPY . .
RUN go mod init server
RUN go mod tidy
RUN GOOS=linux go build -ldflags=&amp;#34;-s -w&amp;#34; -o ./bin/web-app ./server.go

FROM alpine:3.13
RUN apk --no-cache add ca-certificates
WORKDIR /usr/bin
COPY --from=build /go/src/app/bin /go/bin
EXPOSE 8080
ENTRYPOINT /go/bin/web-app --port 8080&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;Dockerfile&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h3 id=&#34;nginx-configuration-and-dockerfile&#34;&gt;nginx configuration and Dockerfile&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;cfg&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-cfg hljs&#34; data-lang=&#34;cfg&#34;&gt;# nginx.conf
events {
    worker_connections 1024;
}

http {
  server_tokens off;
  server {
    listen 80;

    location / {
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header Host            $http_host;

      # timeout set to 2 seconds
      proxy_read_timeout 2s;
      proxy_connect_timeout 2s;
      proxy_send_timeout 2s;

      proxy_pass http://goservice:8080/;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;cfg&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;p&gt;And then the Dockerfile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;Dockerfile&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-Dockerfile hljs&#34; data-lang=&#34;Dockerfile&#34;&gt;# nginx.Dockerfile
FROM nginx:latest
EXPOSE 80
COPY nginx.conf /etc/nginx/nginx.conf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;Dockerfile&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h3 id=&#34;docker-compose&#34;&gt;Docker Compose&lt;/h3&gt;
&lt;p&gt;The last piece missing is a &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker
Compose&lt;/a&gt; file to help us run these containers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;yaml&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-yaml hljs&#34; data-lang=&#34;yaml&#34;&gt;# docker-compose.yaml
version: &amp;#34;3.6&amp;#34;
services:
  goservice:
    build: &amp;#34;server.Dockerfile&amp;#34;
    ports:
      - &amp;#34;8080&amp;#34;
  nginx:
    build: &amp;#34;nginx.Dockerfile&amp;#34;
    ports:
      - &amp;#34;80:80&amp;#34;
    depends_on:
      - &amp;#34;goservice&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;yaml&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h3 id=&#34;running-and-testing&#34;&gt;Running and testing&lt;/h3&gt;
&lt;p&gt;After setting up our environment we can test it by running the commands below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker-compose up --build&lt;/code&gt; to run our containers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl localhost&lt;/code&gt; to make a request to our server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Voil√°! The error shows up confirming our theory!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;nil&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-nil hljs&#34; data-lang=&#34;nil&#34;&gt;goservice_1  | 2022/04/07 01:12:14 error writing: write tcp 172.18.0.2:8080-&amp;gt;172.18.0.3:56768: write: broken pipe&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;nil&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a lot of fun to figure it! As noted by our tests the timeout
configuration of our cluster&amp;rsquo;s reverse proxy was indeed the issue, overriding
the timeout settings with the snippet below solved the issue instantly!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
    &lt;span class=&#34;highlight-type&#34;&gt;yaml&lt;/span&gt;
    &lt;pre&gt;&lt;code class=&#34;language-yaml hljs&#34; data-lang=&#34;yaml&#34;&gt;apiVersion: configuration.konghq.com/v1
kind: KongIngress
metadata:
  annotations:
    kubernetes.io/ingress.class: &amp;#34;kong&amp;#34;
  name: kong-timeout-conf
proxy:
  connect_timeout: 10000000 # 10 minutes
  protocol: http
  read_timeout: 10000000
  retries: 10
  write_timeout: 10000000
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    konghq.com/override: kong-timeout-conf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;style&gt;
    .highlight-type {
        content: &#34;yaml&#34;;
        position: absolute;
        opacity: 0.5;
    }
&lt;/style&gt;</content>
    
    
    <category term="blog"/>
    
  </entry>
  
  <entry>
    <title>Burning out and finding out</title>
    <link rel="alternate" href="https://glorifiedgluer.com/blog/2021/burning-out-and-finding-out/"/>
    <id>https://glorifiedgluer.com/blog/2021/burning-out-and-finding-out/</id>
    <published>2021-08-31T00:00:00Z</published>
    <updated>2021-08-31T00:00:00Z</updated>
    <summary>S√£o Paulo&amp;#39;s Rep√∫blica subway station. (2022-08-03)   At the time of this writing I&amp;rsquo;m burned out. I had no doubt it was a thing and that it could happen to anyone. However, I couldn&amp;rsquo;t see myself suffering from this. At least not so soon.
 Burnout is caused when you repeatedly make large amounts of sacrifice and or effort into high-risk problems that fail. It&amp;rsquo;s the result of a negative prediction error in the nucleus accumbens.</summary>
    <content type="html">&lt;figure&gt;&lt;img src=&#34;/img/2022-08-03-republica-station.jpg&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;S√£o Paulo&amp;#39;s Rep√∫blica subway station. (2022-08-03)&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;At the time of this writing I&amp;rsquo;m burned out. I had no doubt it was a thing and
that it could happen to anyone. However, I couldn&amp;rsquo;t see myself suffering from
this. At least not so soon.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Burnout is caused when you repeatedly make large amounts of sacrifice and or
effort into high-risk problems that fail. It&amp;rsquo;s the result of a negative
prediction error in the nucleus accumbens. You effectively condition your brain
to associate work with failure. &amp;mdash; &lt;a href=&#34;https://news.ycombinator.com/item?id=5630618&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve been pretty active for the past 4 to 5 years due to college, courses, work
and other activities. Yet all of this haven&amp;rsquo;t bothered me in the slightest,
until now. I couldn&amp;rsquo;t take control of basic chores, missed the point of meetings
after a few moments, had no will to leave the bed and many other things.
Moreover, It&amp;rsquo;s a strange feeling with predefined steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You know what you have to do;&lt;/li&gt;
&lt;li&gt;You know it&amp;rsquo;s within your capabilities;&lt;/li&gt;
&lt;li&gt;You get excited to do the task;&lt;/li&gt;
&lt;li&gt;Your body just &lt;em&gt;will not do it&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There you go, you now have the recipe to fight against yourself for a whole day.
This will be a excruciating battle until you hit the bed and repeat it the next
morning. That is, if you aren&amp;rsquo;t already going to sleep late due to forcing
yourself to be productive throughout the day. Realizing I was battling my own
was really important to improve my situation. I started by cleaning my room,
then exercising, putting a alarm to tell me when to eat and so on. My next step
was to change my whole environment by looking after a new job.&lt;/p&gt;
&lt;p&gt;Currently I&amp;rsquo;m not in position to take a sabbatical period of time to discover
new hobbies or a new career - and I don&amp;rsquo;t want to, as I love my current
profession. So, what&amp;rsquo;s left to ponder to change this situation, I may ask
myself? To be honest, I have no clue. While I&amp;rsquo;m in the process to land a new job
I feel that this might be the response I needed to this feeling. New challenges,
new people, new technologies and new everything.&lt;/p&gt;
</content>
    
    
    <category term="blog"/>
    
  </entry>
  
</feed>
